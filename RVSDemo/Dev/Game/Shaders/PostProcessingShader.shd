/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		POSTPROCESSING SHADER	                                			   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

// Output data
struct PsIn 
{
	float4 vertexPosition_worldspace : SV_Position;
	float2 vertexUV					 : TexCoord0;
};

[Vertex shader]
 
 PsIn main(VsIn In)
{
	PsIn output;
	
	output.vertexPosition_worldspace = float4(In.vertexPosition_modelspace, 1.0f);
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	return output;
}

[Fragment shader]

//Target Textures
StructuredBuffer<uint2> postProcessingTarget;
Texture2D ForwardRenderTarget;
Texture2D depthTexture;
Texture2D halfDepthTexture;
Texture2D ssaoRT;
Texture2D volumeLightingTarget;
Texture2D tex_BloomTexture[6];

SamplerState PostProcessingSampler;
SamplerState LinearClampSampler;

float2 screenResolution;
float fBloomIntensitive;

float4 UnpackRGBA16(uint2 e)
{
    return float4(f16tof32(e), f16tof32(e >> 16));
}

float3 JohnHableTonemap(float3 x)
{
	float A = 0.15f;
	float B = 0.50f;
	float C = 0.10f;
	float D = 0.20f;
	float E = 0.02f;
	float F = 0.30f;

	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

 // Returns a random number based on a float3 and an int.
float2 fract(float2 x)
{
	return x - floor(x);
}

float UpSampleSsaoRT(float2 uv)
{
	int2 discreteUV = int2(screenResolution*uv);
	int2 vClosest = floor(discreteUV / 2.0f);
	float2 vBilinearWeight = float2(1.0f, 1.0f) - fract(discreteUV / 2.0f);
	
	float fMainDepth = depthTexture.SampleLevel( PostProcessingSampler, uv, 0.0f ).x;
	
	float fTotalAO = 0.0;
	float fTotalWeight = 0.0;
	
	[unroll]
	for(int x = 0; x < 2; x++)
	{
		[unroll]
		for(int y = 0; y < 2; y++)
		{
			   // Sample depth (stored in meters) and AO for the half resolution 
			   float fSampleDepth = halfDepthTexture.Load( int3(vClosest + int2(x,y), 0) ).x;
			   float fSampleAO = ssaoRT.Load( int3(vClosest + int2(x,y), 0) ).x;

			   // Calculate bilinear weight
			   float fBilinearWeight = abs((x - vBilinearWeight.x) * (y - vBilinearWeight.y));
			   // Calculate upsample weight based on how close the depth is to the main depth
			   float fUpsampleWeight = max(0.00001, 0.1 - abs(fSampleDepth - fMainDepth)) * 30.0;

			   // Apply weight and add to total sum
			   fTotalAO += (fUpsampleWeight + fBilinearWeight) * fSampleAO;
			   fTotalWeight += (fUpsampleWeight + fBilinearWeight);
		}
	}

	// Divide by total sum to get final AO
	float fAO = fTotalAO / fTotalWeight;
	
	return fAO;
}

float4 main(PsIn In) : SV_Target
{
	float4 color;
	
	uint2 vPixelPosition = uint2(In.vertexUV * screenResolution);

	float4 postColor = UnpackRGBA16(postProcessingTarget[vPixelPosition.y * screenResolution.x + vPixelPosition.x]);
	float4 vForwardColor = ForwardRenderTarget.SampleLevel(PostProcessingSampler, In.vertexUV, 0.0f );
	float4 volumeLighting = volumeLightingTarget.SampleLevel(LinearClampSampler, In.vertexUV, 0.0f );
	
	float4 vBloomColor = tex_BloomTexture[0].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f ) +
						 tex_BloomTexture[1].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f ) +
						 tex_BloomTexture[2].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f ) + 
						 tex_BloomTexture[3].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f ) + 
						 tex_BloomTexture[4].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f ) +
						 tex_BloomTexture[5].SampleLevel(LinearClampSampler, In.vertexUV, 0.0f );
	
	//Apply SSAO (Deferred Only)
	float fAO = UpSampleSsaoRT(In.vertexUV);
	
	postColor *= fAO;
	
	// Merge two renderer result
	postColor.rgb = postColor.rgb*(1.0f - vForwardColor.a) + vForwardColor.rgb*vForwardColor.a;
	
	// add volume Lighting
	postColor.rgb = (1.0f - volumeLighting.a)*postColor.rgb + volumeLighting.rgb*volumeLighting.a;
	
	color.xyz = JohnHableTonemap((postColor.rgb + fBloomIntensitive*vBloomColor.rgb)*3.0f);
	color.a = 1.0f;
	
	return color;
}