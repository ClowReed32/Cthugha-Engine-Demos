/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		FLUID_SIMULATION: GRID_COMMON										   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#define NUM_CELLS 262144
#define SIMULATION_BLOCK_SIZE 256

struct Particle
{
    float4 position;
    float4 velocity;
};

struct ParticleForces
{
    float4 acceleration;
};

struct ParticleDensity
{
    float density;
};

//--------------------------------------------------------------------------------------
// Structured Buffers
//--------------------------------------------------------------------------------------
RWStructuredBuffer<Particle> ParticlesRW : register( u0 );
StructuredBuffer<Particle> ParticlesRO : register( t0 );

RWStructuredBuffer<ParticleDensity> ParticlesDensityRW : register( u0 );
StructuredBuffer<ParticleDensity> ParticlesDensityRO : register( t1 );

RWStructuredBuffer<ParticleForces> ParticlesForcesRW : register( u0 );
StructuredBuffer<ParticleForces> ParticlesForcesRO : register( t2 );

RWStructuredBuffer<uint2> GridRW : register( u0 );
StructuredBuffer<uint2> GridRO : register( t3 );

RWStructuredBuffer<uint2> GridIndicesRW : register( u0 );
StructuredBuffer<uint2> GridIndicesRO : register( t4 );

//----------------------------------------------------------------------------------------

//-- Constant Buffer -----------------------------------------
float g_fInverseCellDim;
float g_fGridDim; // GridDim / CellDim

uint g_iNumParticles;
float g_fTimeStep;
float g_fSmoothlen;
float g_fPressureStiffness;
float g_fRestDensity;
float g_fDensityCoef;
float g_fGradPressureCoef;
float g_fLapViscosityCoef;
float g_fWallStiffness;

float4 g_vGravity;
float4 g_vGridDim;
float3 g_vPlanes[4];
//------------------------------------------------------------

uint3 GridCalculateCell(uint3 position)
{
    return uint3(position * g_fInverseCellDim.xxx + g_fGridDim.xxx);
}

uint GridConstuctKey(uint2 xy)
{
    // Bit pack [----KEY---]
    //              32-bit
    return (xyz.x*p1 ^ xyz.y*p2 ^ xyz.z*p3)%NUM_CELLS;
}

uint2 GridConstuctKeyValuePair(uint3 xyz, uint value)
{
	uint p1 = 73856093;
	uint p2 = 19349663;
	uint p3 = 83492791;

    // Bit pack [----KEY---][-----VALUE------]
    //              32-bit		  32-bit
    return uint2((xyz.x*p1 ^ xyz.y*p2 ^ xyz.z*p3)%NUM_CELLS, value);
}

uint GridGetKey(uint2 keyvaluepair)
{
    return keyvaluepair.x;
}

uint GridGetValue(uint2 keyvaluepair)
{
    return keyvaluepair.y;
}