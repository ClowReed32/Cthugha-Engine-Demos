/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		BRICK_CLAY_BEVELED_SHADER								   			   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
	float3 vertexNormal_modelspace	 : Normal;
	float2 vertexUV_modelspace		 : TexCoord;
	float3 vertexTangent_modelspace	 : Tangent;
	float3 vertexBinormal_modelspace : Binormal;
};

// Output data
struct PsIn 
{
	float3 vertexNormal_worldspace   : Normal;
	float4 vertexDepth_projectspace  : SV_Position;
	float4 vertexPosition_viewSpace  : TexCoord0;
	float4 vertexPosition_worldspace : TexCoord1;
	float2 vertexUV					 : TexCoord2;
	float3 vertexTangent_worldspace  : Tangent;
	float3 vertexBinormal_worldspace : Binormal;
};

[Vertex shader]

float4x4 World;
float4x4 View;
float4x4 Projection;

PsIn main(VsIn In)
{
	PsIn output;
	
	float4 vertexPosition_worldspace = mul(float4(In.vertexPosition_modelspace, 1.0f), World);
	output.vertexPosition_viewSpace = mul(vertexPosition_worldspace, View);
	float4 worldViewProjPosition = mul(output.vertexPosition_viewSpace, Projection);
	output.vertexDepth_projectspace = worldViewProjPosition;
	
	output.vertexPosition_worldspace = vertexPosition_worldspace;
	output.vertexNormal_worldspace = normalize(mul(float4(In.vertexNormal_modelspace, 0.0f), World).xyz);
	output.vertexUV.x = In.vertexUV_modelspace.x;
	output.vertexUV.y = 1.0f - In.vertexUV_modelspace.y;
	output.vertexTangent_worldspace = normalize(mul(float4(In.vertexTangent_modelspace, 0.0f), World).xyz);
	output.vertexBinormal_worldspace = normalize(mul(float4(In.vertexBinormal_modelspace, 0.0f), World).xyz);
	
	return output;
 }

[Fragment shader]

struct PsOut 
{
	float depthRT	  : SV_Target0;
	float4 normalRT   : SV_Target1;
	float4 albedoRT   : SV_Target2;
	float4 MREC_RT	  : SV_Target3;
	float4 tangentRT  : SV_Target4;
};

//Textures////////////////////////////////
Texture2D t_MacroVariation;
Texture2D t_DiffuseMap;
Texture2D t_NormalMap;
Texture2D t_RoughnessMap;
//////////////////////////////////////////

//Sampler States//////////////////////////
SamplerState BaseFilter;
//////////////////////////////////////////

//Material////////////////////////////////
float fDisplacementScale;
////////////////////////////////////////////

//Camera constant
float4 vCameraPosition;

//Parallax Occlusion Mapping/////////////////////////////////////////////////////

float2 parallaxMapping(float3 ViewDir_tangentspace, float3 ViewDir_worldspace, float2 T, float3 normal_worldSpace, out float parallaxHeight)
{
	ViewDir_worldspace = normalize(ViewDir_worldspace);

	// determine optimal number of layers
	const float minLayers = 10;
	const float maxLayers = 100;
	int nNumSteps = (int)lerp( maxLayers, minLayers, dot( ViewDir_worldspace, normal_worldSpace ) );
	
	parallaxHeight = 0.08f;
	
	float2 vParallaxDirection = -normalize(ViewDir_tangentspace.xy);
	
	// The length of this vector determines the furthest amount of displacement:
    float fLength         = length(ViewDir_tangentspace);
    float fParallaxLength = sqrt( fLength * fLength - ViewDir_tangentspace.z * ViewDir_tangentspace.z ) / ViewDir_tangentspace.z; 
       
    // Compute the actual reverse parallax displacement vector:
    float2 vParallaxOffsetTS = vParallaxDirection * fParallaxLength * fDisplacementScale;
	
	// Compute all the derivatives:
	float2 dx = ddx(T);
	float2 dy = ddy(T);
	
	float fCurrHeight = 0.0;
	float fStepSize   = 1.0 / (float) nNumSteps;
	float fPrevHeight = 1.0;
	float fNextHeight = 0.0;
	
	int    nStepIndex = 0;
	bool   bCondition = true;

	float2 vTexOffsetPerStep = fStepSize * vParallaxOffsetTS;
	float2 vTexCurrentOffset = T;
	float  fCurrentBound     = 1.0;
	float  fParallaxAmount   = 0.0;

	float2 pt1 = 0;
	float2 pt2 = 0;

	float2 texOffset2 = 0;
   
	while ( nStepIndex < nNumSteps ) 
	{
		vTexCurrentOffset -= vTexOffsetPerStep;

		// Sample height map which in this case is stored in the alpha channel of the normal map:
		fCurrHeight = t_DiffuseMap.SampleGrad( BaseFilter, vTexCurrentOffset, dx, dy ).a;

		fCurrentBound -= fStepSize;

		if ( fCurrHeight > fCurrentBound ) 
		{     
			pt1 = float2( fCurrentBound, fCurrHeight );
			pt2 = float2( fCurrentBound + fStepSize, fPrevHeight );

			texOffset2 = vTexCurrentOffset - vTexOffsetPerStep;

			nStepIndex = nNumSteps + 1;
		}
		else
		{
			nStepIndex++;
			fPrevHeight = fCurrHeight;
		}
	}   // End of while ( nStepIndex < nNumSteps )
   
	float fDelta2 = pt2.x - pt2.y;
	float fDelta1 = pt1.x - pt1.y;
	float fDenominator = fDelta2 - fDelta1;
      
	// SM 3.0 and above requires a check for divide by zero since that operation will generate an 'Inf' number instead of 0
	[flatten]if ( fDenominator == 0.0f ) 
	{
		fParallaxAmount = 0.0f;
	}
	else
	{
		fParallaxAmount = ( pt1.x * fDelta2 - pt2.x * fDelta1 ) / fDenominator;
	}
   
	float2 vParallaxOffset = vParallaxOffsetTS * ( 1.0 - fParallaxAmount );
	
	return T - vParallaxOffset;
}
////////////////////////////////////////////////////////////////////////////////////

PsOut main(PsIn In)
{
	PsOut output;
	
	output.albedoRT = float4(0.0f, 0.0f, 0.0f, 0.0f);
	output.normalRT = float4(0.0f, 0.0f, 0.0f, 0.0f);
	output.MREC_RT = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	float fMacroV0 = t_MacroVariation.Sample(BaseFilter, 0.2134f*In.vertexUV).r + 0.5f;
	float fMacroV1 = t_MacroVariation.Sample(BaseFilter, 0.05341f*In.vertexUV).r + 0.5f;
	float fMacroV2 = t_MacroVariation.Sample(BaseFilter, 0.002f*In.vertexUV).r + 0.5f;
	
	float fMacroVariation = fMacroV0 * fMacroV1 * fMacroV2;
	
	// Normal ///////////////////////////////////////////////////////////////////////////////////////
	float3 tangent_worldSpace = In.vertexTangent_worldspace;
	float3 normal_worldSpace = In.vertexNormal_worldspace;
	float3 binormal_worldSpace = In.vertexBinormal_worldspace;
	float3x3 matInverse = float3x3(tangent_worldSpace, binormal_worldSpace, normal_worldSpace);
	
	float parallaxHeight = 0.0f;
	
	float3 ViewDir_worldspace = vCameraPosition.xyz - In.vertexPosition_worldspace;
	float3 ViewDir_tangentspace = mul(ViewDir_worldspace, matInverse);
	float2 parallaxUVCoord = parallaxMapping(ViewDir_tangentspace, ViewDir_worldspace, In.vertexUV, In.vertexNormal_worldspace, parallaxHeight);
	
	float3x3 matInverseParallaxMap = matInverse;
	matInverseParallaxMap._m10_m11_m12 = -matInverseParallaxMap._m10_m11_m12;
	float3 bumpNormal = normalize(2.0f*(t_NormalMap.Sample(BaseFilter , parallaxUVCoord).rgb - 0.5f));
	bumpNormal = mul(bumpNormal, matInverseParallaxMap);
	output.normalRT = float4(bumpNormal, 0.0f);
	output.tangentRT = float4(In.vertexTangent_worldspace, 0.0f);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Albedo //////////////////////////////////////////////////////////////////////////////////////////
	output.albedoRT = float4(t_DiffuseMap.Sample(BaseFilter, parallaxUVCoord).rgb * lerp(0.75f, 1.0f, fMacroVariation), 1.0f);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// MREC ////////////////////////////////////////////////////////////////////////////////////////////	
	output.MREC_RT.x = 0.0f;	
	output.MREC_RT.y = lerp(0.3f, 0.5f, t_RoughnessMap.Sample(BaseFilter, parallaxUVCoord).r * fMacroVariation);	
	output.MREC_RT.z = 0.0f;
	output.MREC_RT.w = 1.0f;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Depth ////////////////////////////////////////////////////////////////////////////////////////
	output.depthRT = length(In.vertexPosition_viewSpace.xyz);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	
	return output;
}