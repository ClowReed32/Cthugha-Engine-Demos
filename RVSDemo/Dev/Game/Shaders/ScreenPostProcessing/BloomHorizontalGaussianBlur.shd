/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		HORIZONTAL BILATERAL GAUSSIAN BLUR SHADER	                           //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

// Output data
struct PsIn 
{
	float4 vertexPosition_worldspace : SV_Position;
	float2 vertexUV					 : TexCoord0;
};

[Vertex shader]
 
 PsIn main(VsIn In)
{
	PsIn output;
	
	output.vertexPosition_worldspace = float4(In.vertexPosition_modelspace, 1.0f);
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	return output;
}

[Fragment shader]

//Target Textures
Texture2D tex_RenderSource;
SamplerState PointClampSampler;

float4 vGaussianKernel[12];
int iKernelSize;

float2 vInverseScreenResolution;

float4 main(PsIn In) : SV_Target
{
	float4 vGaussian = float4(0.0f, 0.0f, 0.0f, 0.0f);
	float fWeightSum = 0.0f;
	
	float2 offset = vInverseScreenResolution;
	int iKernelInit = -iKernelSize/2;
	
	for (int i = 0; i < iKernelSize; ++i)
    {
		float fGaussianFilterValue = vGaussianKernel[i>>2][i&3];
		float vGaussianOffset = (iKernelInit + i)*offset.x;
		vGaussian += fGaussianFilterValue*tex_RenderSource.SampleLevel( PointClampSampler, float2(In.vertexUV.x + vGaussianOffset, In.vertexUV.y), 0 );
		fWeightSum += fGaussianFilterValue;
	}
	
	vGaussian /= fWeightSum;
	vGaussian.a = 1.0f;
	
	return vGaussian;
}