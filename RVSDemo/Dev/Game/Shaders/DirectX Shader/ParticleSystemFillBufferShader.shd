// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
	uint InstanceId : SV_InstanceID;
};

// Output data
struct PsIn 
{
	float4 vertexDepth_projectspace  : SV_Position;
	float4 vertexPosition_viewSpace	 : TexCoord0;
	float2 uvCoords				 	 : TexCoord1;
};

[Vertex shader]

struct Particle
{
    Mat4x4 mParticleWorld;
    int iDead;
    int iPadding[3];
};

float4x4 View;
float4x4 Projection;

StructuredBuffer < Particle > particleProperties: register(t0);

PsIn main(VsIn In)
{
	PsIn output;
	
	float4x4 mBillBoardsView = float4x4(1.0f, 0.0f, 0.0f, 0.0f,
										0.0f, 1.0f, 0.0f, 0.0f,
										0.0f, 0.0f, 1.0f, 0.0f,
										View.m30, View.m31, View.m32, 1.0f);
	
	Particle particle = particleProperties[In.InstanceId];
	float4 vertexPosition_worldspace = mul(float4(In.vertexPosition_modelspace, 1.0f), particle.mParticleWorld);
	
	output.vertexPosition_viewSpace = mul(vertexPosition_worldspace, mBillBoardsView);
	output.vertexDepth_projectspace = mul(output.vertexPosition_viewSpace, Projection);
	
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	return output;
}

[Fragment shader]

struct PsOut 
{
	float depth	   : SV_Target0;
	float4 normal  : SV_Target1;
	float4 color   : SV_Target2;
};

Texture2D ParticleTexture;

float4 main(PsIn In) : SV_Target0
{	
	PsOut output;
		
	output.color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	output.normal = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	output.normal.xyz = In.vertexNormal_worldspace;
	output.color = ParticleTexture.Sample(BaseFilter, In.uvCoords);
	
	float specularConstant = SpecularTexture.Sample(BaseFilter, parallaxUVCoord).x;
	output.color.w = specularConstant;
			
	output.normal.w = 2.0f*Exponent - 1.0f;	
	output.depth = length(In.vertexPosition_viewSpace.xyz);
	
	return output;
}