/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		GI_VOLUMETRIC_SCATTERING_FUNCTIONS_AND_DEFINES   					   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#define MAX_LIGHTS 256
#define MAX_DIRECTIONAL_LIGHT 32

#define PI 3.14159265359f

int iActiveVolumetricGI;

//float4x4 mInverseView;

// Voxel Cone Tracing constant buffer ///////////////////////////

//Sampler States//////////////////////////
SamplerState VoxelFilter;
//////////////////////////////////////////

//Voxel Textures////////////////////////////
float minVoxelDiameter;
float minVoxelDiameterInv;
float4x4 worldToVoxelTex[6];
float4x4 voxelTexToWorld[6];
float4 cascadeBounds[12];
int numCascades;

Texture3D<float4> giSceneData;
////////////////////////////////////////////

/////////////////////////////////////////////////////////////////

// Auxiliar Function Voxel Cone Tracing /////////////////////////////////////////////////////////////////////////////////////

float4 voxelFetch(float3 pos, float3 dir, float lod, int cascade)
{
	float zCoords = (1.0f/numCascades)*(cascade + pos.z);
	
	float4 sampleX =
		dir.x > 0.0
		? giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.125f*pos.y, zCoords), lod)
		: giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.125f + 0.125f*pos.y, zCoords), lod);
	
	float4 sampleY =
		dir.y > 0.0
		? giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.25f + 0.125f*pos.y, zCoords), lod)
		: giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.375f + 0.125f*pos.y, zCoords), lod);
	
	float4 sampleZ =
		dir.z > 0.0
		? giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.5f + 0.125f*pos.y, zCoords), lod)
		: giSceneData.SampleLevel(VoxelFilter, float3(pos.x, 0.625f + 0.125f*pos.y, zCoords), lod);
	
	float3 sampleWeights = abs(dir);
	float invSampleMag = 1.0f / (sampleWeights.x + sampleWeights.y + sampleWeights.z + 0.0001f);
	sampleWeights *= invSampleMag;
	
	float4 filtered = 
		sampleX * sampleWeights.x
		+ sampleY * sampleWeights.y
		+ sampleZ * sampleWeights.z;
	
	return filtered;
}

bool isInsideAabb(float3 minAabb, float3 maxAabb, float3 pointVec)
{
	if(pointVec.x > minAabb.x && pointVec.x < maxAabb.x &&
    pointVec.y > minAabb.y && pointVec.y < maxAabb.y &&
    pointVec.z > minAabb.z && pointVec.z < maxAabb.z)
    {
        return true;
    }
	
	return false;
}

// Obtain voxel cascade for specific position
int GetCascade(float3 pos)
{
	int count = 0;

	for(uint i = 0; i < 2*numCascades; i+=2)
	{
		if(isInsideAabb(cascadeBounds[i].xyz, cascadeBounds[i + 1].xyz, pos))
		{
			return count;
		}
		
		count++;
	}
	
	return -1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// coneRatio is the cone diameter to height ratio (2.0 for 90-degree cone)
float4 voxelTraceCone(float3 origin, float3 dir, float coneRatio, float maxDist)
{
	//Calculate cascade
	int cascade = GetCascade(origin);
	
	if(cascade != 0)
		return float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	//Origin world to voxel texture coordinates
	float4 origin_voxelspace = mul(float4(origin, 1.0f), worldToVoxelTex[cascade]);
	origin_voxelspace.xyz *= 1.0 / origin_voxelspace.w;
	//Scale distance to voxel texture coordinates
	float fMaxDist = maxDist * worldToVoxelTex[cascade][0][0];
	
	float4 accum = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	// the starting sample diameter
	float minDiameter = minVoxelDiameter;
	
	// push out the starting point to avoid self-intersection
	float startDist = 2.0f*minDiameter;
	
	float dist = startDist;
	
	while (dist <= fMaxDist && accum.a < 1.0)
	{
		// ensure the sample diameter is no smaller than the min
		// desired diameter for this cone (ensuring we always
		// step at least minDiameter each iteration, even for tiny
		// cones - otherwise lots of overlapped samples)
		float sampleDiameter = max(minDiameter, coneRatio * dist);		
		float3 samplePos = origin_voxelspace.xyz + dir * dist;
		
		/*if(samplePos.x > 0.9f || samplePos.y > 0.9f || samplePos.z > 0.9f || samplePos.z < 0.1f || samplePos.z < 0.1f || samplePos.z < 0.1f)
		{
			float4 vPosition_worldspace = mul(float4(samplePos, 1.0f), voxelTexToWorld[cascade]);
			vPosition_worldspace /= vPosition_worldspace.w;
			//cascade = GetCascade(vPosition_worldspace.xyz);
			cascade++;
			
			if(cascade > numCascades)
				break;			
			
			dist *= 0.5f;
			sampleDiameter *= 0.5f;
			
			vPosition_worldspace = mul(vPosition_worldspace, worldToVoxelTex[cascade]);
			samplePos = vPosition_worldspace.xyz/vPosition_worldspace.w;
			origin_voxelspace = mul(float4(origin, 1.0f), worldToVoxelTex[cascade]);
		}*/
		
		// convert diameter to LOD
		// for example:
		// log2(1/256 * 256) = 0
		// log2(1/128 * 256) = 1
		// log2(1/64 * 256) = 2
		float sampleLOD = log2(sampleDiameter * minVoxelDiameterInv);		
		
		float4 sampleValue = voxelFetch(samplePos, -dir, sampleLOD, cascade);
		
		float sampleWeight = (1.0f - accum.a);
		accum += sampleValue * sampleWeight;
		
		dist += sampleDiameter;
	}
	
	return accum;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float4 ComputeIndirectLighting(float4 vPosition_viewspace)
{
	float4 vPosition_worldspace = mul(vPosition_viewspace, mInverseView);
	
	float4 vLambertRadiance = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	if(iActiveVolumetricGI == 1)
	{
		float iblConeRatio = 1.0f;
		float iblMaxDist = 5.0f;
		
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(0.0f, 1.0f, 0.0f), iblConeRatio, iblMaxDist).rgb;
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(0.0f, -1.0f, 0.0f), iblConeRatio, iblMaxDist).rgb;
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(1.0f, 0.0f, 0.0f), iblConeRatio, iblMaxDist).rgb;
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(-1.0f, 0.0f, 0.0f), iblConeRatio, iblMaxDist).rgb;
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(0.0f, 0.0f, 1.0f), iblConeRatio, iblMaxDist).rgb;
		vLambertRadiance.rgb += voxelTraceCone(vPosition_worldspace.xyz, float3(0.0f, 0.0f, -1.0f), iblConeRatio, iblMaxDist).rgb;
		
		vLambertRadiance.rgb *= 0.16666f;
	}
	
	return vLambertRadiance;
}

