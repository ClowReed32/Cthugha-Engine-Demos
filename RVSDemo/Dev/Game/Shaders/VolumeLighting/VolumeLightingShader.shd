/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		VOLUME LIGHTING SHADER												   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

[Compute shader]

#define COMPUTE_SHADER_GROUP_DIM_X 16
#define COMPUTE_SHADER_GROUP_DIM_Y 8
#define COMPUTE_SHADER_GROUP_DIM_Z 1

#include "Shaders\VolumeLighting\Volume_Radiance_Common.shdl"
//#include "Shaders\VolumeLighting\Volume_Radiance_GI.shdl"
#include "Shaders\VolumeLighting\Volume_Common.shdl"

RWTexture3D<float4> VolumeLightingData;

// Uniform Volumetric Voxel Cascades ///////////////
float4 vAmbientColorAndConstantDensity;
////////////////////////////////////////////////////

float fNear;
float4x4 mInverseProjection;

[numthreads(COMPUTE_SHADER_GROUP_DIM_X, COMPUTE_SHADER_GROUP_DIM_Y, COMPUTE_SHADER_GROUP_DIM_Z)]

void main( uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex )
{	
	if(DTid.x < (uint)vGridDimension.x && DTid.y < (uint)vGridDimension.y && DTid.z < (uint)vGridDimension.z)
	{
		float4 outColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
		
		uint3 vVoxelPosition = uint3(DTid.x, DTid.y, DTid.z);
		
		float3 vScreenPosition = ScreenCoordsFromThreadID(vVoxelPosition);
		float fLinearDepth = VolumeZPosToDepth(vScreenPosition.z);
		float fLayerThickness = VolumeZPosToDepth(vScreenPosition.z + fInverseZDimension) - fLinearDepth;
		float3 viewRay = normalize(float3(vScreenPosition.x*mInverseProjection[0][0], vScreenPosition.y*mInverseProjection[1][1], 1.0f));
		float4 vPosition_viewspace = float4(viewRay*fLinearDepth, 1.0f);
		
		float4 vDirectLighting = float4(0.0f, 0.0f, 0.0f, 0.0f);
		float4 vIndirectLighting = float4(0.0f, 0.0f, 0.0f, 0.0f);
		
		// Point Lights
        for (uint uLightIndex = 0; uLightIndex < iNumPointLights; ++uLightIndex) 
		{
			PointSpotLight light = sbPointLights[uLightIndex];
			vDirectLighting += PointLightBRDFFunction(float4(vAmbientColorAndConstantDensity.rgb, 1.0f), 
													  vPosition_viewspace, 
													  light, 
													  uLightIndex);
        }
			
		// Directional Lights
		for (uint uLightIndex = 0; uLightIndex < iNumDirectionalLights; ++uLightIndex) 
		{
            DirectionalLight light = cbDirectionalLights[uLightIndex];
			vDirectLighting += DirectionalLightBRDFFunction(float4(vAmbientColorAndConstantDensity.rgb, 1.0f), 
															vPosition_viewspace,
															light, 
															uLightIndex);
        }  			
		
		//vIndirectLighting = ComputeIndirectLighting(vPosition_viewspace);
		
		outColor = float4(vDirectLighting.rgb + vIndirectLighting.rgb, vAmbientColorAndConstantDensity.a*fLayerThickness);
		
		VolumeLightingData[vVoxelPosition] = outColor;
	}
}