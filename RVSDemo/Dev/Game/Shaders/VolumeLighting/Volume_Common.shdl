/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		VOLUME_COMMON_FUNCTIONS				 								   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#define DEPTH_PACK_EXPONENT 2.0f

// Camera Constant Buffer /////////////////
float3 g_EyeXAxis;
float3 g_EyeYAxis;
float3 g_EyeZAxis;

float3 g_WorldEyePos;
float g_ReprojectDepthScale; //g_ReprojectDepthScale = (zFar - zNear) / (-zFar * zNear)
float g_ReprojectDepthBias; //g_ReprojectDepthBias = zFar / (zFar * zNear)

///////////////////////////////////////////

// Voxel Grid Data //////////////////////////////
float3 vGridDimension;
float fFogRange;
float fInverseZDimension;
/////////////////////////////////////////////////

float3 ScreenCoordsFromThreadID(uint3 threadID)
{
    return ((float3)threadID.xyz)*float3(2.0f / vGridDimension.x, -2.0f / vGridDimension.y, 1.0f / vGridDimension.z) + float3(-1, 1, 0);
}

float3 WorldPositionFromCoords(float2 screenPos, float linearDepth)
{
    float3 eyeRay = (g_EyeXAxis.xyz * screenPos.xxx +
        g_EyeYAxis.xyz * screenPos.yyy +
        g_EyeZAxis.xyz);

    float3 viewRay = eyeRay * linearDepth;
    float3 worldPos = g_WorldEyePos.xyz + viewRay;

    return worldPos;
}

float3 GetViewVector(float2 screenPos, float linearDepth)
{
    float3 eyeRay = (g_EyeXAxis.xyz * screenPos.xxx +
        g_EyeYAxis.xyz * screenPos.yyy +
        g_EyeZAxis.xyz);

    float3 viewRay = eyeRay * linearDepth;

    return viewRay;
}

float VolumeZPosToDepth(float volumePosZ)
{
    return pow(abs(volumePosZ), DEPTH_PACK_EXPONENT) * fFogRange;
}

float DepthToVolumeZPos(float depth)
{
    return pow(abs(depth / fFogRange), 1.0f / DEPTH_PACK_EXPONENT);
}

float3 VolumeTextureSpaceFromScreenSpace(float3 volumeSS)
{
    return saturate(volumeSS) * float3((vGridDimension.x - 1) / vGridDimension.x, (vGridDimension.y - 1) / vGridDimension.y, (vGridDimension.z - 1) / vGridDimension.z) + float3(0.5f / vGridDimension.x, 0.5f / vGridDimension.y, 0.5f / vGridDimension.z);
}

float LinearizeDepth(float depth)
{
    return rcp(depth * g_ReprojectDepthScale + g_ReprojectDepthBias);
}