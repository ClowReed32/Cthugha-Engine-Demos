/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SIGNAL_DISTANCE_FIELD_SHADOWING								   		   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#pragma once

#include "Shaders\Common.shdl"

#define MAX_OBJECT_PER_LIGHT 128
#define OBJECT_SDF_PARAMETER_STRIP 7

// SDF Global buffers
StructuredBuffer<float4> sbPointLightBounds;
StructuredBuffer<float4> sbCulledObjectSDFParameters;
StructuredBuffer<float4> sbCulledObjectBounds;
StructuredBuffer<uint> sbPointLight_CulledObject_Intersection;

float fTwoSidedMeshDistanceBias;

// SDF Object Pack
Texture3D<float> tex_SDFTexturePack;
SamplerState DistanceFieldSampler;

float4 GetSphereBoundCenterAndRadius(uint index)
{
	return sbCulledObjectBounds[index];
}

float4x4 GetWorldToVolumeMatrix(int index)
{
	float4 M0 = sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 3];
	float4 M1 = sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 4];
	float4 M2 = sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 5];
	float4 M3 = sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 6];
	
	return float4x4(M0, M1, M2, M3);
}

float3 GetSDFUVOffset(int index)
{
	return sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 1].xyz;
}

float3 GetLocalPositionExtent(int index, out bool bShadowGeneratedAsTwoSided)
{
	float4 vLocalPositionExtentAndTwoSided = sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP];
	bShadowGeneratedAsTwoSided = vLocalPositionExtentAndTwoSided.w != 0.0f;

	return vLocalPositionExtentAndTwoSided.xyz;
}

float4 GetSDFUVScaleAndVolumeScale(int index)
{
	return sbCulledObjectSDFParameters[index*OBJECT_SDF_PARAMETER_STRIP + 2];
}

float ShadowRayTraceThroughCulledObjects(
			float3 vWorldRayStart,
			float3 vWorldRayEnd,
			float fMaxRayLength,
			float fTanLightAngle,
			float fMinSphereRadius,
			float fMaxSphereRadius,
			uint uLightIndex,
			uint uOffset)
{
	float fShadow = 1.0f;
	uint uNumIntersectingObject = sbPointLight_CulledObject_Intersection[(uOffset + uLightIndex)*MAX_OBJECT_PER_LIGHT];
	float3 vWorldRayDirection = normalize(vWorldRayEnd - vWorldRayStart);
	
	[loop]
	for(uint i = 0; i < uNumIntersectingObject; i++)
	{
		uint uObjectIndex = sbPointLight_CulledObject_Intersection[(uOffset + uLightIndex)*MAX_OBJECT_PER_LIGHT + i + 1];
		
		float4 vSphereBoundCenterAndRadius = GetSphereBoundCenterAndRadius(uObjectIndex);		
		float fObjectCenterDistanceAlongRay = dot(vSphereBoundCenterAndRadius.xyz - vWorldRayStart, vWorldRayDirection);
		
		[branch]
		if(fObjectCenterDistanceAlongRay > -vSphereBoundCenterAndRadius.w)
		{
			bool bShadowGeneratedAsTwoSided = false;
			
			float3 vLocalPositionExtent = GetLocalPositionExtent(uObjectIndex, bShadowGeneratedAsTwoSided);
			float3 vSDFUVOffset = GetSDFUVOffset(uObjectIndex);
			float4 vSDFUVScaleAndVolumeScale = GetSDFUVScaleAndVolumeScale(uObjectIndex);
			float4x4 mWorldToVolume = GetWorldToVolumeMatrix(uObjectIndex);
			
			float3 vVolumeRayStart = mul(float4(vWorldRayStart, 1.0f), mWorldToVolume).xyz;
			float3 vVolumeRayEnd = mul(float4(vWorldRayEnd, 1.0f), mWorldToVolume).xyz;
			float3 vVolumeRayDirection = vVolumeRayEnd - vVolumeRayStart;
			float fVolumeRayLength = length(vVolumeRayDirection);
			vVolumeRayDirection /= fVolumeRayLength;
			
			float fWorldToVolumeScale = 1.0f / vSDFUVScaleAndVolumeScale.w;
			float fVolumeMinSphereRadius = fMinSphereRadius * fWorldToVolumeScale;
			float fVolumeMaxSphereRadius = fMaxSphereRadius * fWorldToVolumeScale;
			
			float fVolumeTwoSidedMeshDistanceBias = fTwoSidedMeshDistanceBias * fWorldToVolumeScale;

			// Expand the intersection box by the radius of the cone at the distance of the object along the cone
			float fLocalConeRadiusAtObject = min(fTanLightAngle * max(fObjectCenterDistanceAlongRay, 0) * fWorldToVolumeScale, fVolumeMaxSphereRadius);
			
			float2 vIntersectionTimes = Ray_Aabb_Intersect(vVolumeRayStart, vVolumeRayEnd, -vLocalPositionExtent - fLocalConeRadiusAtObject, vLocalPositionExtent + fLocalConeRadiusAtObject);
			
			[branch]
			if(vIntersectionTimes.x < vIntersectionTimes.y && vIntersectionTimes.x < 1.0f)
			{
				float fSampleRayTime = vIntersectionTimes.x * fVolumeRayLength;
				uint uMaxSteps = 64;
				float fMinStepSize = 1.0f / (4 * uMaxSteps);

				//float fMinDistance = 1000000;
				uint uStepIndex = 0;

				[loop]
				for (; uStepIndex < uMaxSteps; uStepIndex++)
				{
					float3 vSampleVolumePosition = vVolumeRayStart + vVolumeRayDirection * fSampleRayTime;
					float3 vClampedSamplePosition = clamp(vSampleVolumePosition, - vLocalPositionExtent*0.95f, vLocalPositionExtent*0.95f);
					float fDistanceToClamped = length(vClampedSamplePosition - vSampleVolumePosition); // Good Idea. Avoid sharp cuts on SDF object limits
					float3 vVolumeUV = vSDFUVOffset + vSDFUVScaleAndVolumeScale.xyz*vClampedSamplePosition;
					float fDistanceField = tex_SDFTexturePack.SampleLevel(DistanceFieldSampler, vVolumeUV, 0).x + fDistanceToClamped;
					
					[flatten]
					if (bShadowGeneratedAsTwoSided)
					{
						fDistanceField -= fVolumeTwoSidedMeshDistanceBias;
					}
					
					//fMinDistance = min(fMinDistance, fDistanceField);
					float fSphereRadius = clamp(fTanLightAngle * fSampleRayTime, fVolumeMinSphereRadius, fVolumeMaxSphereRadius);
					float fStepVisibility = saturate(fDistanceField / fSphereRadius);

					fShadow = min(fShadow, fStepVisibility);

					float fStepDistance = max(abs(fDistanceField), fMinStepSize);
					fSampleRayTime += fStepDistance;

					// Terminate the trace if we are fully occluded or went past the end of the ray
					if (fShadow < .01f
						|| fSampleRayTime > vIntersectionTimes.y * fVolumeRayLength)
					{
						break;
					}
				}

				if (fShadow < .01f || uStepIndex == uMaxSteps)
				{
					fShadow = 0;
					fMinStepSize = min(fMinStepSize, fSampleRayTime * vSDFUVScaleAndVolumeScale.w);
				}

				// Force to shadowed as we approach max steps
				fShadow = min(fShadow, (1 - uStepIndex / (float)uMaxSteps));
			}
		}
	}
	
	return fShadow;
}

float SDFDirectionalShadows(float4 vPosition_viewspace, 
				 float fSceneDepth, 
				 DirectionalLight light, 
				 uint uLightIndex)
{
	// World space offset along the start of the ray to avoid incorrect self-shadowing
	float fRayStartOffsetDepthScale = 0.01f;
	float RayStartOffset = 0.25f + fRayStartOffsetDepthScale * fSceneDepth;
	
	float3 vPosition_worldspace = mul(vPosition_viewspace, mInverseView).xyz;
	float3 vLightDirection_worldspace = mul(float4(light.vViewLightDirection, 0.0f), mInverseView).xyz;
	float3 vEndPosition = vPosition_worldspace - vLightDirection_worldspace*light.fLength;
	float3 vLightVector = vEndPosition - vPosition_worldspace;
	float fRayLength = length(vLightVector);
	float fTanLightAngle = 0.001f;
	float fMinSphereRadius = 0.005f;
	float fMaxSphereRadius = 100;
	
	return ShadowRayTraceThroughCulledObjects( vPosition_worldspace + vLightVector/fRayLength * RayStartOffset,
											   vEndPosition,
											   fRayLength,
											   fTanLightAngle,
											   fMinSphereRadius,
											   fMaxSphereRadius,
											   uLightIndex,
											   MAX_LIGHTS);
}

float SDFSpotPointShadows(float4 vPosition_viewspace, 
				 float fSceneDepth, 
				 PointSpotLight light, 
				 uint uLightIndex)
{
	// World space offset along the start of the ray to avoid incorrect self-shadowing
	float fRayStartOffsetDepthScale = 0.01f;
	float RayStartOffset = 0.25f + fRayStartOffsetDepthScale * fSceneDepth;
	
	float3 vPosition_worldspace = mul(vPosition_viewspace, mInverseView).xyz;
	float3 vEndPosition = mul(float4(light.vViewPosition, 1.0f), mInverseView).xyz;
	float3 vLightVector = vEndPosition - vPosition_worldspace;
	float fRayLength = length(vLightVector);
	float fTanLightAngle = 0.0174550649282f;
	float fMinSphereRadius = 0.001f;
	float fMaxSphereRadius = 100;
	
	return ShadowRayTraceThroughCulledObjects( vPosition_worldspace + vLightVector/fRayLength * RayStartOffset,
											   vEndPosition,
											   fRayLength,
											   fTanLightAngle,
											   fMinSphereRadius,
											   fMaxSphereRadius,
											   uLightIndex,
											   0);
}

float SDFDirectionalShadowsGI(float4 vPosition_viewspace, 
							 DirectionalLight light, 
							 uint uLightIndex)
{
	// World space offset along the start of the ray to avoid incorrect self-shadowing
	float RayStartOffset = 0.25f;
	
	float3 vPosition_worldspace = mul(vPosition_viewspace, mInverseView).xyz;
	float3 vLightDirection_worldspace = mul(float4(light.vViewLightDirection, 0.0f), mInverseView).xyz;
	float3 vEndPosition = vPosition_worldspace - vLightDirection_worldspace*light.fLength;
	float3 vLightVector = vEndPosition - vPosition_worldspace;
	float fRayLength = length(vLightVector);
	float fTanLightAngle = 0.001f;
	float fMinSphereRadius = 0.005f;
	float fMaxSphereRadius = 100;
	
	return ShadowRayTraceThroughCulledObjects( vPosition_worldspace + vLightVector/fRayLength * RayStartOffset,
											   vEndPosition,
											   fRayLength,
											   fTanLightAngle,
											   fMinSphereRadius,
											   fMaxSphereRadius,
											   uLightIndex,
											   MAX_LIGHTS);
}

float SDFSpotPointShadowsGI(float4 vPosition_viewspace, 
							PointSpotLight light, 
							uint uLightIndex)
{
	// World space offset along the start of the ray to avoid incorrect self-shadowing
	float RayStartOffset = 0.25f;
	
	float3 vPosition_worldspace = mul(vPosition_viewspace, mInverseView).xyz;
	float3 vEndPosition = mul(float4(light.vViewPosition, 1.0f), mInverseView).xyz;
	float3 vLightVector = vEndPosition - vPosition_worldspace;
	float fRayLength = length(vLightVector);
	float fTanLightAngle = 0.0174550649282f;
	float fMinSphereRadius = 0.001f;
	float fMaxSphereRadius = 100;
	
	return ShadowRayTraceThroughCulledObjects( vPosition_worldspace + vLightVector/fRayLength * RayStartOffset,
											   vEndPosition,
											   fRayLength,
											   fTanLightAngle,
											   fMinSphereRadius,
											   fMaxSphereRadius,
											   uLightIndex,
											   0);
}