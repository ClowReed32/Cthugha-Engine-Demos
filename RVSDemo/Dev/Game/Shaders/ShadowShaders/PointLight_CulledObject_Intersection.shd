/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		POINTLIGHT_CULLEDOBJECT_INTERSECTION   								   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

[Compute shader]

#include "Shaders\Common.shdl"

#define MAX_CULLED_OBJECT 1024
#define MAX_SHADOW_POINT_LIGHT 256
#define MAX_OBJECT_PER_LIGHT 128

StructuredBuffer<float4> sbPointLightBounds;
StructuredBuffer<float4> sbCulledObjectBounds;
RWStructuredBuffer<uint> sbPointLight_CulledObject_Intersection;

int iNumCulledObject;

groupshared uint suObjectCount;

[numthreads(MAX_OBJECT_PER_LIGHT, 1, 1)]

void main( uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex )
{
	if(GTid.x == 0)
		suObjectCount = 0;
		
	GroupMemoryBarrierWithGroupSync();
	
	float4 vLightCenterAndRadius = sbPointLightBounds[Gid.x];
	
	for(uint i = GTid; i < iNumCulledObject; i+=MAX_OBJECT_PER_LIGHT)
	{	
		float4 vObjectCenterAndRadius = sbCulledObjectBounds[i];
		
		if(Sphere_Sphere_Intersection(vLightCenterAndRadius.xyz, vLightCenterAndRadius.w, vObjectCenterAndRadius.xyz, vObjectCenterAndRadius.w))
		{
			uint uObjectIndex = 0;
			InterlockedAdd(suObjectCount, 1, uObjectIndex);
			sbPointLight_CulledObject_Intersection[Gid.x*MAX_OBJECT_PER_LIGHT + uObjectIndex + 1] = i;
		}
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	if(GTid.x == 0)
		sbPointLight_CulledObject_Intersection[Gid.x*MAX_OBJECT_PER_LIGHT] = suObjectCount;
}