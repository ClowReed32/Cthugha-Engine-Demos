/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SIGNAL_DISTANCE_FIELD_SUBSURFACE							   		   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#pragma once

#define SUBSURFACE_CONSTANT 0.1f

//Small ShadowRayTraceThroughCulledObjects customization for obtain object depth

float SDFRayTraceThroughSubSurfaceObject(
			float3 vWorldRayStart,
			float3 vWorldRayEnd,
			uint uObjectIndex)
{
	float fObjectDepth = 0.0f;
	
	float3 vLocalPositionExtent = GetLocalPositionExtent(uObjectIndex);
	float3 vSDFUVOffset = GetSDFUVOffset(uObjectIndex);
	float4 vSDFUVScaleAndVolumeScale = GetSDFUVScaleAndVolumeScale(uObjectIndex);
	float4x4 mWorldToVolume = GetWorldToVolumeMatrix(uObjectIndex);
			
	float3 vVolumeRayStart = mul(float4(vWorldRayStart, 1.0f), mWorldToVolume).xyz;
	float3 vVolumeRayEnd = mul(float4(vWorldRayEnd, 1.0f), mWorldToVolume).xyz;
	float3 vVolumeRayDirection = vVolumeRayEnd - vVolumeRayStart;
	float fVolumeRayLength = length(vVolumeRayDirection);
	vVolumeRayDirection /= fVolumeRayLength;
			
	float2 vIntersectionTimes = Ray_Aabb_Intersect(vVolumeRayStart, vVolumeRayEnd, -vLocalPositionExtent, vLocalPositionExtent);
			
	[branch]
	if(vIntersectionTimes.x < vIntersectionTimes.y && vIntersectionTimes.x < 1.0f)
	{
		float fSampleRayTime = vIntersectionTimes.x * fVolumeRayLength;
		uint uMaxSteps = 64;
		float fMinStepSize = 1.0f / (4 * uMaxSteps);

		//float fMinDistance = 1000000;
		uint uStepIndex = 0;
		
		[loop]
		for (; uStepIndex < uMaxSteps; uStepIndex++)
		{
			float3 vSampleVolumePosition = vVolumeRayStart + vVolumeRayDirection * fSampleRayTime;
			float3 vClampedSamplePosition = clamp(vSampleVolumePosition, - vLocalPositionExtent*0.95f, vLocalPositionExtent*0.95f);
			float fDistanceToClamped = length(vClampedSamplePosition - vSampleVolumePosition); // Good Idea. Avoid sharp cuts on SDF object limits
			float3 vVolumeUV = vSDFUVOffset + vSDFUVScaleAndVolumeScale.xyz*vClampedSamplePosition;
			float fDistanceField = tex_SDFTexturePack.SampleLevel(DistanceFieldSampler, vVolumeUV, 0).x + fDistanceToClamped;
					
			float fStepDistance = max(abs(fDistanceField), fMinStepSize);
			fSampleRayTime += fStepDistance;

			// Terminate the trace if we are fully occluded or went past the end of the ray
			if (fDistanceField < .01f
				|| fSampleRayTime > vIntersectionTimes.y * fVolumeRayLength)
			{
				break;
			}
		}
		
		fObjectDepth = fVolumeRayLength - fSampleRayTime*vSDFUVScaleAndVolumeScale.w;
		
		[flatten]
		if(fObjectDepth < 0.001f)
			fObjectDepth = 0.0f;
	}
	
	return fObjectDepth;
}

float4 SDFDirectionalSubsurface(float3 vSubsurfaceColor,
								float fOpacity,
								float4 vPosition_viewspace, 
								float fSceneDepth, 
								DirectionalLight light,
								float fNoL,
								uint uLightIndex)
{
	float4 vSubsurfaceResult = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float fReverseOpacity = 1.0f - fOpacity;
	float fWrap = 0.1;
	float fWrapNoL = max(0.0f, (fNoL + fWrap)/(1.0f + fWrap));
	
	vSubsurfaceResult.rgb = fReverseOpacity*light.fIntensitive*fWrapNoL*vSubsurfaceColor;

	return vSubsurfaceResult;
}

float4 SDFSpotPointSubsurface(float3 vSubsurfaceColor,
								float fOpacity,
								float4 vPosition_viewspace, 
								float fSceneDepth, 
								PointSpotLight light,
								float fNoL,
								float fAtt,
								uint uLightIndex)
{
	float4 vSubsurfaceResult = float4(0.0f, 0.0f, 0.0f, 1.0f);
	float fReverseOpacity = 1.0f - fOpacity;
	float fWrap = 0.1;
	float fWrapNoL = (fNoL + fWrap)/(1.0f + fWrap);
	
	vSubsurfaceResult.rgb = fReverseOpacity*fAtt*light.fIntensitive*fWrapNoL*vSubsurfaceColor;
	
	return vSubsurfaceResult;
}