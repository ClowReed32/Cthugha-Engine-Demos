/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		LIGHTING_FUNCTIONS_AND_DEFINES   								   	   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

#define MAX_LIGHTS 256
#define MAX_DIRECTIONAL_LIGHT 32

#define PI 3.14159265359f

int iActiveShadows;

// Lights Struct ///////////////////////////////////////////////////////////

struct DirectionalLight
{
	float3 vColor;
	float fIntensitive;
	float3 vViewLightDirection;
	int iShadows;
	float3 vViewInitPosition;
	float fLength;
	float3 vPadding;
	float fMaxRadius;	
};

struct PointSpotLight
{
	float3 vColor;
	float fIntensitive;
	float3 vViewPosition;
	float fRadius;
	int iShadows;
	float fTheta;
	float fPhi;
	int iType;
	float3 vLightDirection;
	int iUnused;
};

/////////////////////////////////////////////////////////////////////////////

// Lights Properties ////////////////////////////////////////////////////////

StructuredBuffer<PointSpotLight> sbPointLights : register(t5);
DirectionalLight cbDirectionalLights[MAX_DIRECTIONAL_LIGHT];

int iNumDirectionalLights;
int iNumPointLights;

float4x4 mInverseView; //Change

/////////////////////////////////////////////////////////////////////////////

#include "Shaders\ShadowShaders\SignedDistanceFieldShadows.shdl"
//#include "Shaders\SubsurfaceShaders\SignedDistanceFieldSubsurface.shdl"

/////////////////////////////////////////////////////////////////////////////

float D_Function(float a, float fNoH)
{
	float a2 = a*a;
    float NoH2 = fNoH * fNoH;
    float denominator = NoH2 * (a2 - 1.0f) + 1.0f;
    denominator *= denominator;
    denominator *= PI;
    
	return a2 / denominator;
}

float G_Function(float a, float fNoV, float fNoL)
{
	float fK = a*0.5f;
	float fG0 = fNoV / (fNoV*(1 - fK) + fK + 0.0001f);
	float fG1 = fNoL / (fNoL*(1 - fK) + fK + 0.0001f);
	return fG0*fG1;
}

float3 F_Function(float3 vSpecularColor, float fVoH)
{
	float fF0 = (-5.55473f*fVoH - 6.98316f)*fVoH;	
	return (vSpecularColor + (1.0f - vSpecularColor) * pow(2.0f, (-5.55473f*fVoH - 6.98316f)*fVoH));
}

float4 directionalLightDirectIllumination(float4 diffuseColor, 
										  float3 vSpecularColor, 
										  float fRoughness2, 
										  float4 vertexNormal_viewspace, 
										  float4 vPosition_viewspace, 
										  float fSceneDepth, 
										  float3 vV, 
										  float fNoV, 
										  DirectionalLight light, 
										  uint uLightIndex,
										  /*Subsurface Parameters*/
										  bool bSubsurface,
										  float3 vSubsurfaceColor,
										  uint vObjectIndex)
{
	[branch]
	if(light.fMaxRadius != 0 && !Point_Cylinder_Intersect(light.vViewInitPosition, light.vViewLightDirection, light.fLength, light.fMaxRadius, vPosition_viewspace.xyz))
		return float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	//Shadow Calculate	
	float shadowOcclusion = 1.0f;
	
	// Shadows /////////////////////////////////////////////////////////////////////////////////////////////////////////
	[branch]
	if(light.iShadows && iActiveShadows == 1)
	{
		shadowOcclusion = SDFDirectionalShadows(vPosition_viewspace, 
												fSceneDepth, 
												light, 
												uLightIndex);
	}	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	float3 vLightDirection = -light.vViewLightDirection;
	
	float3 vH = normalize(vLightDirection + vV);
	
	float fNoH = saturate(dot(vertexNormal_viewspace.xyz, vH));
	float fVoH = saturate(dot(vV, vH));
	float fNoL = saturate(dot(vLightDirection, vertexNormal_viewspace.xyz));
	
	float4 fSpec = float4((D_Function(fRoughness2, fNoH)*G_Function(fRoughness2, fNoV, fNoL)*F_Function(vSpecularColor, fVoH))/(4*fNoL*fNoV + 0.0001f), 1.0f);
	
	return shadowOcclusion*light.fIntensitive*float4(light.vColor, 1.0f)*(diffuseColor*(1.0f - fSpec) + fSpec)*fNoL;
}

float4 pointLightDirectIllumination(float4 diffuseColor, 
									float3 vSpecularColor, 
									float fRoughness2, 
									float4 vertexNormal_viewspace, 
									float4 vPosition_viewspace, 
									float fSceneDepth, 
									float3 vV, 
									float fNoV, 
									PointSpotLight light, 
									uint uLightIndex,
									/*Subsurface Parameters*/
									bool bSubsurface,
									float3 vSubsurfaceColor,
									uint vObjectIndex)
{
	float fOpacity = 1.0f;
	float fSubsurfaceAtt = 0.0f;

	float3 vLightingResult = float3(0.0f, 0.0f, 0.0f);
	float3 vLightDirection = light.vViewPosition - vPosition_viewspace.xyz;
	float Distance = length(vLightDirection);

	[branch]
	if(Distance > light.fRadius)
		return float4(0.0f, 0.0f, 0.0f, 0.0f);

	//Shadow Calculate
	float shadowOcclusion = 1.0f;
	
	// Shadows /////////////////////////////////////////////////////////////////////////////////////////////////////////
	[branch]
	if(light.iShadows && iActiveShadows == 1)
	{
		shadowOcclusion = SDFSpotPointShadows(vPosition_viewspace, 
											  fSceneDepth, 
											  light, 
											  uLightIndex);
	}	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	vLightDirection /= Distance;
	
	float3 vH = normalize(vLightDirection + vV);
	
	float fNoH = saturate(dot(vertexNormal_viewspace.xyz, vH));
	float fVoH = saturate(dot(vV, vH));
	float fNoLNotSaturate = dot(vLightDirection, vertexNormal_viewspace.xyz);
	float fNoL = saturate(fNoLNotSaturate);
	
	float3 fSpec = (D_Function(fRoughness2, fNoH)*G_Function(fRoughness2, fNoV, fNoL)*F_Function(vSpecularColor, fVoH))/(4*fNoL*fNoV + 0.0001f);
	
	float att1 = 1 - pow(Distance/(light.fRadius + 1.0f), 4);
	float att = saturate(att1*att1)/(Distance*Distance + 1);
	
	/*[branch]
	if(bSubsurface)
	{
		float3 vPosition_worldspace = mul(vPosition_viewspace, mInverseView).xyz;
		float3 vEndPosition = mul(float4(light.vViewPosition, 1.0f), mInverseView).xyz;
		
		float fObjectDepth = SDFRayTraceThroughSubSurfaceObject(vEndPosition,
														  vPosition_worldspace,
														  vObjectIndex);
														  
		fSubsurfaceAtt = 1.0f/(10.0f*fObjectDepth*fObjectDepth + 1.0f)*(1.0f - fNoL);
		fOpacity = diffuseColor.a;
	}*/
	
	vLightingResult = att*shadowOcclusion*light.fIntensitive*light.vColor*fOpacity*(diffuseColor.rgb*(1.0f - fSpec) + fSpec)*fNoL;
	
	//Subsurface
	//vLightingResult +=  light.fIntensitive*light.vColor*att*(1.0f - fOpacity)*vSubsurfaceColor*fSubsurfaceAtt;
	
	return float4(vLightingResult, 1.0f);
}

float4 spotLightDirectIllumination(float4 diffuseColor, 
								   float3 vSpecularColor, 
								   float fRoughness2, 
								   float4 vertexNormal_viewspace, 
								   float4 vPosition_viewspace, 
								   float fSceneDepth, 
								   float3 vV, 
								   float fNoV, 
								   PointSpotLight light, 
								   uint uLightIndex,
								   /*Subsurface Parameters*/
								   bool bSubsurface,
								   float3 vSubsurfaceColor,
								   uint vObjectIndex)
{
	//Shadow Calculate
	float shadowOcclusion = 1.0f;
	
	float3 vLightDirection = light.vViewPosition - vPosition_viewspace.xyz;
	float Distance = length(vLightDirection);
	
	vLightDirection /= Distance;
	
	float cos_cur_angle = dot(-light.vLightDirection, vLightDirection);
	
	float cos_thetaAngle = cos(light.fTheta*0.5f);
	float cos_phiAngle = cos(light.fPhi*0.5f);
	float cos_inner_minus_outer_angle = cos_thetaAngle - cos_phiAngle;
	
	[branch]
	if(Distance > light.fRadius || cos_cur_angle < cos_phiAngle)
		return float4(0.0f, 0.0f, 0.0f, 0.0f);	
	
	// Shadows /////////////////////////////////////////////////////////////////////////////////////////////////////////
	[branch]
	if(light.iShadows && iActiveShadows == 1)
	{
		shadowOcclusion = SDFSpotPointShadows(vPosition_viewspace, 
											  fSceneDepth, 
											  light, 
											  uLightIndex);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	[branch]
	if (cos_cur_angle > cos_thetaAngle) 
	{
		float3 vH = normalize(vLightDirection + vV);
	
		float fNoH = saturate(dot(vertexNormal_viewspace.xyz, vH));
		float fVoH = saturate(dot(vV, vH));
		float fNoL = saturate(dot(vLightDirection, vertexNormal_viewspace.xyz));
		
		float4 fSpec = float4((D_Function(fRoughness2, fNoH)*G_Function(fRoughness2, fNoV, fNoL)*F_Function(vSpecularColor, fVoH))/(4*fNoL*fNoV + 0.0001f), 1.0f);
		
		float att1 = 1 - pow(Distance/(light.fRadius + 0.0001), 4);
		float att = saturate(att1*att1)/(Distance*Distance + 1);
		
		return att*shadowOcclusion*light.fIntensitive*float4(light.vColor, 1.0f)*(diffuseColor*(1.0f - fSpec) + fSpec)*fNoL;
	}
	else if( cos_cur_angle > cos_phiAngle )
	{
		float falloff = (cos_cur_angle - cos_phiAngle) / 
		cos_inner_minus_outer_angle;
		
		float3 vH = normalize(vLightDirection + vV);
	
		float fNoH = saturate(dot(vertexNormal_viewspace.xyz, vH));
		float fVoH = saturate(dot(vV, vH));
		float fNoL = saturate(dot(vLightDirection, vertexNormal_viewspace.xyz));
		
		float4 fSpec = float4((D_Function(fRoughness2, fNoH)*G_Function(fRoughness2, fNoV, fNoL)*F_Function(vSpecularColor, fVoH))/(4*fNoL*fNoV + 0.0001f), 1.0f);
		
		float att1 = 1 - pow(Distance/(light.fRadius + 0.0001), 4);
		float att = saturate(att1*att1)/(Distance*Distance + 1);
		
		return falloff*att*shadowOcclusion*light.fIntensitive*float4(light.vColor, 1.0f)*(diffuseColor*(1.0f - fSpec) + fSpec)*fNoL;
	}
	
	return float4(0.0f, 0.0f, 0.0f, 0.0f);	
}

float4 PointLightBRDFFunction(float4 diffuseColor, 
							  float3 vSpecularColor, 
							  float fRoughness2, 
							  float4 vertexNormal_viewspace, 
							  float4 vPosition_viewspace, 
							  float fSceneDepth, 
							  float3 vV, 
							  float fNoV, 
							  PointSpotLight light, 
							  uint uLightIndex,
							  /*Subsurface Parameters*/
							  bool bSubsurface,
							  float3 vSubsurfaceColor,
							  uint vObjectIndex)
{
	[branch]
	if(light.iType == 1)
	{
		return pointLightDirectIllumination(diffuseColor, 
											vSpecularColor, 
											fRoughness2, 
											vertexNormal_viewspace, 
											vPosition_viewspace, 
											fSceneDepth, 
											vV, 
											fNoV, 
											light, 
											uLightIndex,
											/*Subsurface Parameters*/
											bSubsurface,
											vSubsurfaceColor,
											vObjectIndex);
	}
	else if(light.iType == 2)
	{
		return spotLightDirectIllumination(diffuseColor, 
										   vSpecularColor, 
										   fRoughness2, 
										   vertexNormal_viewspace, 
										   vPosition_viewspace, 
										   fSceneDepth, 
										   vV, 
										   fNoV, 
										   light, 
										   uLightIndex,
										   /*Subsurface Parameters*/
										   bSubsurface,
										   vSubsurfaceColor,
										   vObjectIndex);
	}
	
	return float4(0.0f, 0.0f, 0.0f, 0.0f);
}

float4 DirectionalLightBRDFFunction(float4 diffuseColor, 
									float3 vSpecularColor, 
									float fRoughness2, 
									float4 vertexNormal_viewspace, 
									float4 vPosition_viewspace, 
									float fSceneDepth, 
									float3 vV, 
									float fNoV, 
									DirectionalLight light, 
									uint uLightIndex,
									/*Subsurface Parameters*/
									bool bSubsurface,
									float3 vSubsurfaceColor,
									uint vObjectIndex)
{
	return directionalLightDirectIllumination(diffuseColor, 
											  vSpecularColor, 
											  fRoughness2, 
											  vertexNormal_viewspace, 
											  vPosition_viewspace, 
											  fSceneDepth, 
											  vV, 
											  fNoV, 
											  light, 
											  uLightIndex,
											  /*Subsurface Parameters*/
											  bSubsurface,
											  vSubsurfaceColor,
											  vObjectIndex);
}