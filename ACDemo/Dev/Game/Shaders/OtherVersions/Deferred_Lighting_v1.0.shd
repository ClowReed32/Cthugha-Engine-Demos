/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		DEFERRED SHADER				   										   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

[Compute shader]

//#include "Shaders\Common.shdl"

#define COMPUTE_SHADER_TILE_GROUP_DIM 16
#define COMPUTE_SHADER_TILE_GROUP_SIZE (COMPUTE_SHADER_TILE_GROUP_DIM*COMPUTE_SHADER_TILE_GROUP_DIM)

RWStructuredBuffer<uint2> sbLightingBuffer;
float2 vLightingBufferDimensions;

uint uNum_Groups_X;

//Light Indices
StructuredBuffer<uint> sbLightIndices;

// GBuffer //////////////////////////////////////////////////////////////////

Texture2D depthTarget;
Texture2D normalTarget;
Texture2D baseTarget;
Texture2D MREC_Target;
Texture2D indirectDiffuseTarget;

/////////////////////////////////////////////////////////////////////////////

// Camera Properties ////////////////////////////////////////////////////////

float2 vCameraNearFar;
float4 vCameraPosition;
float4x4 mProjection;
float4x4 mView;
float4x4 mInverseProjection;
//float4x4 mInverseView;

/////////////////////////////////////////////////////////////////////////////

#include "Shaders\PhysicalLighting.shdl"

groupshared uint sTilePointLightIndices[MAX_LIGHTS];
groupshared uint sTileDirectionalLightIndices[MAX_DIRECTIONAL_LIGHT];

[numthreads(COMPUTE_SHADER_TILE_GROUP_DIM, COMPUTE_SHADER_TILE_GROUP_DIM, 1)]
void main(uint3 groupId : SV_GroupID, uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupThreadId : SV_GroupThreadID)
{
    // NOTE: This is currently necessary rather than just using SV_GroupIndex to work
    // around a compiler bug on Fermi.
    uint groupIndex = groupThreadId.y * COMPUTE_SHADER_TILE_GROUP_DIM + groupThreadId.x;
    uint2 globalCoords = dispatchThreadId.xy;
	
	// Read GBuffer 	
	float4 vBaseColor = baseTarget.Load( uint3(globalCoords, 0) );
	float4 vVertexNormal_viewspace = mul(float4(normalize(normalTarget.Load( uint3(globalCoords, 0) )).xyz, 0.0f), mView);
	//float4 indirectDiffuse = indirectDiffuseTarget.SampleLevel( LinearSample, In.vertexUV, 0.0f );
	float fZdepth = depthTarget.Load( uint3(globalCoords, 0) ).x;
	float4 vMREC = MREC_Target.Load( uint3(globalCoords, 0) );
    
	uint uFixedOffset = (MAX_DIRECTIONAL_LIGHT + MAX_LIGHTS)*(groupId.y*uNum_Groups_X + groupId.x);
	
    uint numPointLights = sbLightIndices[uFixedOffset];
	uint numDirectionalLights = sbLightIndices[uFixedOffset + MAX_LIGHTS + 1];
	
	// Point Lights
    for (uint lightIndex = groupIndex; lightIndex < numPointLights; lightIndex += COMPUTE_SHADER_TILE_GROUP_SIZE) 
	{
        sTilePointLightIndices[lightIndex] = sbLightIndices[uFixedOffset + lightIndex + 1];
    }
	
	// Directional Lights
	for (uint lightIndex = groupIndex; lightIndex < numDirectionalLights; lightIndex += COMPUTE_SHADER_TILE_GROUP_SIZE) 
	{
        sTileDirectionalLightIndices[lightIndex] = sbLightIndices[uFixedOffset + MAX_LIGHTS + lightIndex + 2];
    }
	
	GroupMemoryBarrierWithGroupSync();
	
    // Only process onscreen pixels (tiles can span screen edges)
    if (all(globalCoords < vLightingBufferDimensions.xy)) 
	{
		float4 vDirectLighting = float4(0.0f, 0.0f, 0.0f, 0.0f);
		
        //[branch] 
		if (numPointLights > 0 || numDirectionalLights > 0) 
		{
            vBaseColor /= PI;
			float4 vRealAlbedo = vBaseColor - vBaseColor * vMREC.x/*metallic*/;
			
			// 0.03 default specular value for dielectric.
			float3 vRealSpecularColor = lerp(0.03f, vBaseColor.xyz, vMREC.x/*metallic*/);
			
			// Obtain view space position coordinates ///////////////////////////////////////
			float2 screenPixelOffset = float2(2.0f, -2.0f) / vLightingBufferDimensions;
			float2 positionScreen = (float2(globalCoords.xy) + 0.5f) * screenPixelOffset.xy + float2(-1.0f, 1.0f);
			
			float4 viewRay = mul( float4(positionScreen, 0.0f, 1.0f), mInverseProjection);
			viewRay /= viewRay.w;
			viewRay.xyz = normalize(viewRay.xyz);
				
			float4 vPosition_viewspace = float4(viewRay.xyz*fZdepth, 1.0f);
			//////////////////////////////////////////////////////////////////////////////////
			
			//Auxiliar operation
			float3 vV = normalize(- vPosition_viewspace.xyz);
			float fNoV = saturate(dot(vV, vVertexNormal_viewspace.xyz));
			float a = vMREC.y*vMREC.y;			
			
			// Point Lights
            for (uint tileLightIndex = 0; tileLightIndex < numPointLights; ++tileLightIndex) 
			{
				uint uLightIndex = sTilePointLightIndices[tileLightIndex];
                PointSpotLight light = sbPointLights[uLightIndex];
				vDirectLighting += PointLightBRDFFunction(vRealAlbedo, vRealSpecularColor, a/*Roughness2*/, vVertexNormal_viewspace, vPosition_viewspace, fZdepth, vV, fNoV, light, uLightIndex);
            }
			
			// Directional Lights
			for (uint tileLightIndex = 0; tileLightIndex < numDirectionalLights; ++tileLightIndex) 
			{
				uint uLightIndex = sTileDirectionalLightIndices[tileLightIndex];
                DirectionalLight light = cbDirectionalLights[uLightIndex];
				vDirectLighting += DirectionalLightBRDFFunction(vRealAlbedo, vRealSpecularColor, a/*Roughness2*/, vVertexNormal_viewspace, vPosition_viewspace, fZdepth, vV, fNoV, light, uLightIndex);
            }  			
        }
		
		sbLightingBuffer[globalCoords.y * (uint)vLightingBufferDimensions.x + globalCoords.x] = PackRGBA16(float4(vDirectLighting.rgb, 1.0f));
    }
}