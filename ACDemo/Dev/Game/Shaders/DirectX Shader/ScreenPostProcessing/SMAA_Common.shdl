/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SMAA FUNCTIONS												   		   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

/**
 * Copyright (C) 2011 Jorge Jimenez (jorge@iryoku.com)
 * Copyright (C) 2011 Jose I. Echevarria (joseignacioechevarria@gmail.com) 
 * Copyright (C) 2011 Belen Masia (bmasia@unizar.es) 
 * Copyright (C) 2011 Fernando Navarro (fernandn@microsoft.com) 
 * Copyright (C) 2011 Diego Gutierrez (diegog@unizar.es)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the following disclaimer
 *       in the documentation and/or other materials provided with the 
 *       distribution:
 *
 *      "Uses SMAA. Copyright (C) 2011 by Jorge Jimenez, Jose I. Echevarria,
 *       Tiago Sousa, Belen Masia, Fernando Navarro and Diego Gutierrez."
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS 
 * IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS OR CONTRIBUTORS 
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are 
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the copyright holders.
 */

#define SMAA_THRESHOLD 0.1
#define SMAA_MAX_SEARCH_STEPS 16
#define SMAA_MAX_SEARCH_STEPS_DIAG 8
#define SMAA_CORNER_ROUNDING 25

#define SMAA_AREATEX_MAX_DISTANCE 16
#define SMAA_AREATEX_MAX_DISTANCE_DIAG 20
#define SMAA_AREATEX_PIXEL_SIZE (1.0 / float2(160.0, 560.0))
#define SMAA_AREATEX_SUBTEX_SIZE (1.0 / 7.0)

// Target Textures
Texture2D SceneTarget;

// Precomputed Textures
Texture2D areaTex;
Texture2D searchTex;

// Edges
Texture2D edgesTex;

//Sampler States
SamplerState PointClampSampler;
SamplerState LinearClampSampler;

float2 fPixelSize;

float4 SMAA_Edge_Detection(float2 uvTexcoord, float4 offset[3])
{
    float2 threshold = float2(SMAA_THRESHOLD, SMAA_THRESHOLD);

    // Calculate lumas:
    float3 weights = float3(0.2126, 0.7152, 0.0722);
    float L = dot(SceneTarget.SampleLevel(LinearClampSampler, uvTexcoord, 0).rgb, weights);
    float Lleft = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[0].xy, 0).rgb, weights);
    float Ltop  = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[0].zw, 0).rgb, weights);

    // We do the usual threshold:
    float4 delta;
    delta.xy = abs(L - float2(Lleft, Ltop));
    float2 edges = step(threshold, delta.xy);

    // Then discard if there is no edge:
    if (dot(edges, float2(1.0, 1.0)) == 0.0)
        discard;

    // Calculate right and bottom deltas:
    float Lright = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[1].xy, 0).rgb, weights);
    float Lbottom  = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[1].zw, 0).rgb, weights);
    delta.zw = abs(L - float2(Lright, Lbottom));

    // Calculate the maximum delta in the direct neighborhood:
    float2 maxDelta = max(delta.xy, delta.zw);
    maxDelta = max(maxDelta.xx, maxDelta.yy);

    // Calculate left-left and top-top deltas:
    float Lleftleft = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[2].xy, 0).rgb, weights);
    float Ltoptop = dot(SceneTarget.SampleLevel(LinearClampSampler, offset[2].zw, 0).rgb, weights);
    delta.zw = abs(float2(Lleft, Ltop) - float2(Lleftleft, Ltoptop));

    // Calculate the final maximum delta:
    maxDelta = max(maxDelta.xy, delta.zw);

    /**
     * Each edge with a delta in luma of less than 50% of the maximum luma
     * surrounding this pixel is discarded. This allows to eliminate spurious
     * crossing edges, and is based on the fact that, if there is too much
     * contrast in a direction, that will hide contrast in the other
     * neighbors.
     * This is done after the discard intentionally as this situation doesn't
     * happen too frequently (but it's important to do as it prevents some 
     * edges from going undetected).
     */
    edges.xy *= step(0.5 * maxDelta, delta.xy);

    return float4(edges, 0.0, 0.0);
}

/**
 * These functions allows to perform diagonal pattern searches.
 */
float SMAASearchDiag1(float2 texcoord, float2 dir, float c) 
{
    texcoord += dir * fPixelSize;
    float2 e = float2(0.0, 0.0);
    
	float i;    
	for (i = 0.0; i < float(SMAA_MAX_SEARCH_STEPS_DIAG); i++) 
	{
        e.rg = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
        [flatten] if (dot(e, float2(1.0, 1.0)) < 1.9) break;
        texcoord += dir * fPixelSize;
    }
	
    return i + float(e.g > 0.9) * c;
}

float SMAASearchDiag2(float2 texcoord, float2 dir, float c) 
{
    texcoord += dir * fPixelSize;
    float2 e = float2(0.0, 0.0);
	
    float i;
    for (i = 0.0; i < float(SMAA_MAX_SEARCH_STEPS_DIAG); i++) 
	{
        e.g = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).g;
        e.r = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0, int2(1, 0)).r;
        [flatten] if (dot(e, float2(1.0, 1.0)) < 1.9) break;
        texcoord += dir * fPixelSize;
    }
	
    return i + float(e.g > 0.9) * c;
}

/** 
 * Similar to SMAAArea, this calculates the area corresponding to a certain
 * diagonal distance and crossing edges 'e'.
 */
float2 SMAAAreaDiag(float2 dist, float2 e, float offset) 
{
    float2 texcoord = float(SMAA_AREATEX_MAX_DISTANCE_DIAG) * e + dist;

    // We do a scale and bias for mapping to texel space:
    texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + (0.5 * SMAA_AREATEX_PIXEL_SIZE);

    // Diagonal areas are on the second half of the texture:
    texcoord.x += 0.5;

    // Move to proper place, according to the subpixel offset:
    texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;

    // Do it!
    return areaTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
}

/**
 * This searches for diagonal patterns and returns the corresponding weights.
 */
float2 SMAACalculateDiagWeights(float2 texcoord, float2 e, int4 subsampleIndices) 
{
    float2 weights = float2(0.0, 0.0);

    float2 d;
    d.x = e.r > 0.0 ? SMAASearchDiag1(texcoord, float2(-1.0,  1.0), 1.0) : 0.0;
    d.y = SMAASearchDiag1(texcoord, float2(1.0, -1.0), 0.0);

    [branch]
    if (d.r + d.g > 2.0) 
	{
        float4 coords = mad(float4(-d.r, d.r, d.g, -d.g), fPixelSize.xyxy, texcoord.xyxy);

        float4 c;
        c.x = edgesTex.SampleLevel(LinearClampSampler, coords.xy, 0, int2(-1,  0)).g;
        c.y = edgesTex.SampleLevel(LinearClampSampler, coords.xy, 0, int2( 0,  0)).r;
        c.z = edgesTex.SampleLevel(LinearClampSampler, coords.zw, 0, int2( 1,  0)).g;
        c.w = edgesTex.SampleLevel(LinearClampSampler, coords.zw, 0, int2( 1, -1)).r;
        float2 e = 2.0 * c.xz + c.yw;
        float t = float(SMAA_MAX_SEARCH_STEPS_DIAG) - 1.0;
        e *= step(d.rg, float2(t, t));

        weights += SMAAAreaDiag(d, e, float(subsampleIndices.z));
    }

    d.x = SMAASearchDiag2(texcoord, float2(-1.0, -1.0), 0.0);
    float right = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0, int2( 1,  0)).r;
    d.y = right > 0.0f ? SMAASearchDiag2(texcoord, float2(1.0, 1.0), 1.0) : 0.0;

    [branch]
    if (d.r + d.g > 2.0) { // d.r + d.g + 1 > 3
        float4 coords = mad(float4(-d.r, -d.r, d.g, d.g), fPixelSize.xyxy, texcoord.xyxy);

        float4 c;
        c.x  = edgesTex.SampleLevel(LinearClampSampler, coords.xy, 0, int2(-1,  0)).r;SMAASampleLevelZeroOffset(edgesTex, coords.xy, int2(-1,  0)).g;
        c.y  = edgesTex.SampleLevel(LinearClampSampler, coords.xy, 0, int2( 0, -1)).r;SMAASampleLevelZeroOffset(edgesTex, coords.xy, int2( 0, -1)).r;
        c.zw = edgesTex.SampleLevel(LinearClampSampler, coords.zw, 0, int2( 1,  0)).r;SMAASampleLevelZeroOffset(edgesTex, coords.zw, int2( 1,  0)).gr;
        float2 e = 2.0 * c.xz + c.yw;
        float t = float(SMAA_MAX_SEARCH_STEPS_DIAG) - 1.0;
        e *= step(d.rg, float2(t, t));

        weights += SMAAAreaDiag(d, e, float(subsampleIndices.w)).gr;
    }

    return weights;
}

/**
 * This allows to determine how much length should we add in the last step
 * of the searches. It takes the bilinearly interpolated edge (see 
 * @PSEUDO_GATHER4), and adds 0, 1 or 2, depending on which edges and
 * crossing edges are active.
 */
float SMAASearchLength(float2 e, float bias, float scale) 
{
    // Not required if searchTex accesses are set to point:
    // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);
    // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE + 
    //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;
    e.r = bias + e.r * scale;
    return 255.0 * searchTex.SampleLevel(PointClampSampler, e, 0).r;
}

/**
 * Horizontal/vertical search functions for the 2nd pass.
 */
float SMAASearchXLeft(float2 texcoord, float end) 
{
    /**
     * @PSEUDO_GATHER4
     * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to
     * sample between edge, thus fetching four edges in a row.
     * Sampling with different offsets in each direction allows to disambiguate
     * which edges are active from the four fetched ones.
     */
    float2 e = float2(0.0, 1.0);
    while (texcoord.x > end && 
           e.g > 0.8281 && // Is there some edge not activated?
           e.r == 0.0) 
	{ // Or is there a crossing edge that breaks the line?
        e = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
        texcoord -= float2(2.0, 0.0) * fPixelSize;
    }

    // We correct the previous (-0.25, -0.125) offset we applied:
    texcoord.x += 0.25 * fPixelSize.x;

    // The searches are bias by 1, so adjust the coords accordingly:
    texcoord.x += fPixelSize.x;

    // Disambiguate the length added by the last step:
    texcoord.x += 2.0 * fPixelSize.x; // Undo last step
    texcoord.x -= fPixelSize.x * SMAASearchLength(e, 0.0, 0.5);

    return texcoord.x;
}

float SMAASearchXRight(float2 texcoord, float end) 
{
    float2 e = float2(0.0, 1.0);
    while (texcoord.x < end && 
           e.g > 0.8281 && // Is there some edge not activated?
           e.r == 0.0) 
	{ // Or is there a crossing edge that breaks the line?
        e = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
        texcoord += float2(2.0, 0.0) * fPixelSize;
    }

    texcoord.x -= 0.25 * fPixelSize.x;
    texcoord.x -= fPixelSize.x;
    texcoord.x -= 2.0 * fPixelSize.x;
    texcoord.x += fPixelSize.x * SMAASearchLength(e, 0.5, 0.5);
    return texcoord.x;
}

float SMAASearchYUp(float2 texcoord, float end) 
{
    float2 e = float2(1.0, 0.0);
    while (texcoord.y > end && 
           e.r > 0.8281 && // Is there some edge not activated?
           e.g == 0.0) 
	{ // Or is there a crossing edge that breaks the line?
        e = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
        texcoord -= float2(0.0, 2.0) * fPixelSize;
    }

    texcoord.y += 0.25 * fPixelSize.y;
    texcoord.y += fPixelSize.y;
    texcoord.y += 2.0 * fPixelSize.y;
    texcoord.y -= fPixelSize.y * SMAASearchLength(e.gr, 0.0, 0.5);
    return texcoord.y;
}

float SMAASearchYDown(SMAATexture2D edgesTex, SMAATexture2D searchTex, float2 texcoord, float end) 
{
    float2 e = float2(1.0, 0.0);
    while (texcoord.y < end && 
           e.r > 0.8281 && // Is there some edge not activated?
           e.g == 0.0) 
	{ // Or is there a crossing edge that breaks the line?
        e = edgesTex.SampleLevel(LinearClampSampler, texcoord, 0).rg;
        texcoord += float2(0.0, 2.0) * fPixelSize;
    }
    
    texcoord.y -= 0.25 * fPixelSize.y;
    texcoord.y -= fPixelSize.y;
    texcoord.y -= 2.0 * fPixelSize.y;
    texcoord.y += fPixelSize.y * SMAASearchLength(e.gr, 0.5, 0.5);
    return texcoord.y;
}

void SMAADetectHorizontalCornerPattern(inout float2 weights, float2 texcoord, float2 d) 
{  
    float4 coords = SMAAMad(float4(d.x, 0.0, d.y, 0.0),
                            SMAA_PIXEL_SIZE.xyxy, texcoord.xyxy);
    float2 e;
    e.r = edgesTex.SampleLevel(LinearClampSampler, coords.xy, int2(0, 1)).r;
    bool left = abs(d.x) < abs(d.y);
    e.g = edgesTex.SampleLevel(LinearClampSampler, coords.xy, int2(0.0, -2.0)).r;
    if (left) weights *= saturate(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e);

    e.r = edgesTex.SampleLevel(LinearClampSampler, coords.zw, int2(1.0,  1.0)).r;
    e.g = edgesTex.SampleLevel(LinearClampSampler, coords.zw, int2(1.0, -2.0)).r;
    if (!left) weights *= saturate(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e);
}

void SMAADetectVerticalCornerPattern(inout float2 weights, float2 texcoord, float2 d) 
{
    float4 coords = SMAAMad(float4(0.0, d.x, 0.0, d.y),
                            SMAA_PIXEL_SIZE.xyxy, texcoord.xyxy);
    float2 e;
    e.r = edgesTex.SampleLevel(LinearClampSampler, coords.xy, int2( 1.0, 0.0)).g;
    bool left = abs(d.x) < abs(d.y);
    e.g = edgesTex.SampleLevel(LinearClampSampler, coords.xy, int2(-2.0, 0.0)).g;
    if (left) weights *= saturate(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e);

    e.r = edgesTex.SampleLevel(LinearClampSampler, coords.zw, int2( 1.0, 1.0)).g;
    e.g = edgesTex.SampleLevel(LinearClampSampler, coords.zw, int2(-2.0, 1.0)).g;
    if (!left) weights *= saturate(float(SMAA_CORNER_ROUNDING) / 100.0 + 1.0 - e);
}

float4 SMAA_BlendingWeightCalculation(float2 uvTexcoord,
                                      float2 pixcoord,
                                      float4 offset[3])
{
    float4 weights = float4(0.0, 0.0, 0.0, 0.0);
	int4 subsampleIndices = int4(0, 0, 0, 0);
	
    float2 e = edgesTex.SampleLevel(LinearClampSampler, uvTexcoord, 0.0f).rg;

    [branch]
    if (e.g > 0.0) 
	{ // Edge at north
        
        // Diagonals have both north and west edges, so searching for them in
        // one of the boundaries is enough.
        weights.rg = SMAACalculateDiagWeights(texcoord, e, subsampleIndices);

        // We give priority to diagonals, so if we find a diagonal we skip 
        // horizontal/vertical processing.
        [branch]
        if (dot(weights.rg, float2(1.0, 1.0)) == 0.0) 
		{        
			float2 d;

			// Find the distance to the left:
			float2 coords;
			coords.x = SMAASearchXLeft(offset[0].xy, offset[2].x);
			coords.y = offset[1].y; // offset[1].y = texcoord.y - 0.25 * SMAA_PIXEL_SIZE.y (@CROSSING_OFFSET)
			d.x = coords.x;

			// Now fetch the left crossing edges, two at a time using bilinear
			// filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to
			// discern what value each edge has:
			float e1 = edgeTex.SampleLevel(LinearClampSampler, coords, 0).r;

			// Find the distance to the right:
			coords.x = SMAASearchXRight(offset[0].zw, offset[2].y);
			d.y = coords.x;

			// We want the distances to be in pixel units (doing this here allow to
			// better interleave arithmetic and memory accesses):
			d = d / fPixelSize.x - pixcoord.x;

			// SMAAArea below needs a sqrt, as the areas texture is compressed 
			// quadratically:
			float2 sqrt_d = sqrt(abs(d));

			// Fetch the right crossing edges:
			float e2 = edgesTex.SampleLevel(LinearClampSampler, coords, 0, int2(1, 0)).r;

			// Ok, we know how this pattern looks like, now it is time for getting
			// the actual area:
			weights.rg = SMAAArea(sqrt_d, e1, e2, float(subsampleIndices.y));

			// Fix corners:
			SMAADetectHorizontalCornerPattern(weights.rg, texcoord, d);        
        } 
		else
            e.r = 0.0; // Skip vertical processing.
    }

    [branch]
    if (e.r > 0.0) 
	{ 
        float2 d;

        // Find the distance to the top:
        float2 coords;
        coords.y = SMAASearchYUp(offset[1].xy, offset[2].z);
        coords.x = offset[0].x; // offset[1].x = texcoord.x - 0.25 * SMAA_PIXEL_SIZE.x;
        d.x = coords.y;

        // Fetch the top crossing edges:
        float e1 = edgeTex.SampleLevel(LinearClampSampler, coords, 0).g;

        // Find the distance to the bottom:
        coords.y = SMAASearchYDown(offset[1].zw, offset[2].w);
        d.y = coords.y;

        // We want the distances to be in pixel units:
        d = d / fPixelSize.y - pixcoord.y;

        // SMAAArea below needs a sqrt, as the areas texture is compressed 
        // quadratically:
        float2 sqrt_d = sqrt(abs(d));

        // Fetch the bottom crossing edges:
        float e2 = edgesTex.SampleLevel(LinearClampSampler, coords, 0, int2(0, 1)).g;

        // Get the area for this direction:
        weights.ba = SMAAArea(sqrt_d, e1, e2, float(subsampleIndices.x));

        // Fix corners:
        SMAADetectVerticalCornerPattern(weights.ba, texcoord, d);
    }

    return weights;
}