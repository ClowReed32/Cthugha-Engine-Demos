/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		BLOOM_REDUCE SHADER	                                	   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

// Output data
struct PsIn 
{
	float4 vertexPosition_worldspace : SV_Position;
	float2 vertexUV					 : TexCoord0;
};

[Vertex shader]
 
 PsIn main(VsIn In)
{
	PsIn output;
	
	output.vertexPosition_worldspace = float4(In.vertexPosition_modelspace, 1.0f);
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	return output;
}

[Fragment shader]

//Target Textures
Texture2D tex_RenderSource;

SamplerState PointClampSampler;

float2 vInverseScreenResolution;

float4 Luminance(float4 vColor)
{
	return 0.2126f*vColor.r + 0.7152f*vColor.g + 0.0722f*vColor.b;
}

float4 main(PsIn In) : SV_Target
{
	float4 vTotalPixelColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	float2 vOffset[4] = {float2(0.0f, 0.0f), float2(vInverseScreenResolution.x, 0.0f), float2(0.0f, vInverseScreenResolution.y), vInverseScreenResolution};
	
	[unroll]
	for(uint i = 0; i < 4; i++)
	{
		float4 vColor = tex_RenderSource.SampleLevel(PointClampSampler, In.vertexUV + vOffset[i], 0.0f );
		
		vTotalPixelColor += vColor;
	}	
		
	vTotalPixelColor.a = 1.0f;
	
	return vTotalPixelColor*0.25f;
}