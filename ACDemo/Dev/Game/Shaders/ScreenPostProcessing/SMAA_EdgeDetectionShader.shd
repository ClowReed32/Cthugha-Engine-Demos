/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SMAA: EDGE DETECTION SHADER                                			   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

[Vertex shader]
 
float2 fPixelSize;
 
void main(VsIn In, 
		  out float4 svPosition : SV_POSITION,
          out float2 vertexUV : TEXCOORD0,
          out float4 offset[3] : TEXCOORD1)
{
	svPosition = float4(In.vertexPosition_modelspace, 1.0f);
	vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	vertexUV.y = 1.0f - vertexUV.y;
	
	offset[0] = vertexUV.xyxy + fPixelSize.xyxy * float4(-1.0, 0.0, 0.0, -1.0);
    offset[1] = vertexUV.xyxy + fPixelSize.xyxy * float4( 1.0, 0.0, 0.0,  1.0);
    offset[2] = vertexUV.xyxy + fPixelSize.xyxy * float4(-2.0, 0.0, 0.0, -2.0);
}

[Fragment shader]

#include "Shaders\ScreenPostProcessing\SMAA_Common.shdl"

float4 main(float4 position : SV_POSITION, float2 vertexUV : TEXCOORD0, float4 offset[3] : TEXCOORD1) : SV_Target
{
	return SMAA_Edge_Detection(vertexUV, offset);
}