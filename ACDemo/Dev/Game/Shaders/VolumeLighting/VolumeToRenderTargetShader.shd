/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SIMPLE LIGHTINGSHADER	(NO LIGHTING, ONLY COLOR TEXTURE)			   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

// Output data
struct PsIn 
{
	float4 vertexPosition_worldspace : SV_Position;
	float2 vertexUV					 : TexCoord0;
	float3 ViewRay				 	 : TexCoord1;
};

[Vertex shader]

//Uniform Matrix
float4x4 mInverseView;
float4x4 mInverseProjection;

float4 vCameraPosition;

PsIn main(VsIn In)
{
	PsIn output;
	
	output.vertexPosition_worldspace = float4(In.vertexPosition_modelspace, 1.0f);
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	float4 positionWS = mul(float4(In.vertexPosition_modelspace, 1.0f), mul(mInverseProjection, mInverseView));
	positionWS /= positionWS.w;
	
	output.ViewRay = positionWS - vCameraPosition;
	
	return output;
 }

[Fragment shader]

#include "Shaders\VolumeLighting\Volume_Common.shdl"

//Target Textures
Texture2D depthTarget;

//Volume Lighting data
Texture3D VolumeLightingData;

//Sampler
SamplerState TargetSample;
SamplerState BilinearSample;

//Matrix
float4x4 mView;
float4x4 mProjection;

// Linear depth distribution constant /////////
float fFrustumDepth;
////////////////////////////////////////////////////

float4 vCameraPosition;

float rand(float2 uv)
{
      return 0.5+(frac(sin(dot(uv.xy ,float2(12.9898,78.233))) * 43758.5453))*0.5;
}

float4 main(PsIn In) : SV_Target
{
	float4 vOutputColor;

	float depth = depthTarget.Sample( TargetSample, In.vertexUV ).x;
	
	if(depth == 0.0f)
		depth = fFrustumDepth;
	
	//Obtain world space position coordinates	
	float3 viewRay = normalize(In.ViewRay.xyz);
	float4 vPosition_worldspace = float4(vCameraPosition.xyz + viewRay*depth, 1.0f);
	
	float4 vPosition_viewspace = mul(vPosition_worldspace, mView);
	vPosition_viewspace /= vPosition_viewspace.w;
	float4 vPosition_projectspace = mul( vPosition_viewspace, mProjection);
	vPosition_projectspace /= vPosition_projectspace.w;
	vPosition_projectspace.xy = float2(0.5f, -0.5f)*vPosition_projectspace.xy + 0.5f;
	vPosition_projectspace.z = DepthToVolumeZPos(LinearizeDepth(vPosition_projectspace.z));
	
	vOutputColor = VolumeLightingData.SampleLevel(BilinearSample, VolumeTextureSpaceFromScreenSpace(vPosition_projectspace.xyz), 0);
	
	return vOutputColor/**(0.9f + 0.1f*rand(In.vertexUV.xy + vCameraPosition.xy))*/;
}