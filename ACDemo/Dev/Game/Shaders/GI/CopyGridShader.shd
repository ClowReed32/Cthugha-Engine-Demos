[Compute shader]

int cascadeResolution;
int cascade;
int iOffset;

RWTexture3D<float4> dstMip;
Texture3D srcTex;

[numthreads(16, 8, 1)]

void main( uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex )
{
	if(DTid.x < cascadeResolution && DTid.y < cascadeResolution && DTid.z < cascadeResolution)
	{
		int zOffset = DTid.z + cascadeResolution*cascade;
		dstMip[int3(DTid.x, DTid.y, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + iOffset, DTid.z, 0));
		dstMip[int3(DTid.x, DTid.y + cascadeResolution, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + cascadeResolution + iOffset, DTid.z, 0));
		dstMip[int3(DTid.x, DTid.y + cascadeResolution*2, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + cascadeResolution*2 + iOffset, DTid.z, 0));
		dstMip[int3(DTid.x, DTid.y + cascadeResolution*3, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + cascadeResolution*3 + iOffset, DTid.z, 0));
		dstMip[int3(DTid.x, DTid.y + cascadeResolution*4, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + cascadeResolution*4 + iOffset, DTid.z, 0));
		dstMip[int3(DTid.x, DTid.y + cascadeResolution*5, zOffset)] = srcTex.Load(int4(DTid.x, DTid.y + cascadeResolution*5 + iOffset, DTid.z, 0));
	}	
}