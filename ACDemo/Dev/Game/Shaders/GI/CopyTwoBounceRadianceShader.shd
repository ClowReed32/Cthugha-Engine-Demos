[Compute shader]

Texture3D<uint> GI_GBuffer;
Texture3D<float4> GI_Radiance;

RWTexture3D<float4> GI_RadianceOuput;

int iCascadeResolution;
int iCascadeIndex;

float4 convRGBA8Tofloat4(uint val)
{
	return float4( float((val&0x000000FF)), float((val&0x0000FF00)>>8U), float((val&0x00FF0000)>>16U), float((val&0xFF000000)>>24U) );
}

[numthreads(16, 8, 1)]

void main( uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex )
{
	float4 vColorOcclusion = convRGBA8Tofloat4(GI_GBuffer.Load(int4(DTid.x, DTid.y, iCascadeIndex*iCascadeResolution + DTid.z, 0)))*0.003921f;
	float fOcclusion = vColorOcclusion.a;
	
	if(fOcclusion > 0.0f)
	{
		//Obtain data from GBuffer
		
		float4 vNormalEmission = convRGBA8Tofloat4(GI_GBuffer.Load(int4(DTid.x, iCascadeResolution + DTid.y, iCascadeIndex*iCascadeResolution + DTid.z, 0)))*0.003921f;		
		float3 vVertexNormal_worldspace = normalize(2.0f*(vNormalEmission.xyz) - 1.0f);
		
		float4 vRadiance = GI_Radiance.Load(int4(DTid.x, DTid.y, DTid.z, 0));
		
		GI_RadianceOuput[int3(DTid.x, DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(1.0f, 0.0f, 0.0f)));
		GI_RadianceOuput[int3(DTid.x, iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(-1.0f, 0.0f, 0.0f)));
		GI_RadianceOuput[int3(DTid.x, 2*iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(0.0f, 1.0f, 0.0f)));
		GI_RadianceOuput[int3(DTid.x, 3*iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(0.0f, -1.0f, 0.0f)));
		GI_RadianceOuput[int3(DTid.x, 4*iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(0.0f, 0.0f, 1.0f)));
		GI_RadianceOuput[int3(DTid.x, 5*iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance*saturate(dot(vVertexNormal_worldspace, float3(0.0f, 0.0f, -1.0f)));
		GI_RadianceOuput[int3(DTid.x, 6*iCascadeResolution + DTid.y, iCascadeResolution*iCascadeIndex + DTid.z)] = vRadiance;
	}
}