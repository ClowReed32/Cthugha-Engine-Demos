
// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
};

// Output data
struct PsIn 
{
	float4 vertexPosition_worldspace  : SV_Position;
	float2 vertexUV					  : TexCoord0;
};

[Vertex shader]

PsIn main(VsIn In)
{
	PsIn output;
	
	output.vertexPosition_worldspace = float4(In.vertexPosition_modelspace, 1.0f);
	output.vertexUV = (In.vertexPosition_modelspace.xy+float2(1,1))*0.5f;
	output.vertexUV.y = 1.0f - output.vertexUV.y;
	
	return output;
 }

[Fragment shader]

Texture3D<float4> voxelTexture;
int cascade;
int cascadeResolution;
float depthLevel;
float mipLevel;

//Texture2D voxelTexture;
SamplerState baseFilter;

//Pixel Transform Function///////////////////////////////////////////////////////////////////////////////////////////////////////////
float4 convRGBA8Tofloat4(uint val)
{
	return float4( float((val&0x000000FF)), float((val&0x0000FF00)>>8U), float((val&0x00FF0000)>>16U), float((val&0xFF000000)>>24U) );
}
 
float4 main(PsIn In) : SV_Target
{
	float4 outputColor = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	//outputColor = voxelTexture.SampleLevel(baseFilter, float3(In.vertexUV.x, 0.0625f, In.vertexUV.y*0.25f), 2.0f);
	//outputColor = voxelTexture.SampleLevel(baseFilter, In.vertexUV, 0.0f);
	
	//uint uiOutputColor = voxelTexture.Load(int4(cascadeResolution*In.vertexUV.x, cascadeResolution*In.vertexUV.y, 0.25*depthLevel, mipLevel));
	outputColor = voxelTexture.SampleLevel(baseFilter, float3(In.vertexUV.x, In.vertexUV.y, 0.25f), 0);
	outputColor.a = 1.0f;
	
	//outputColor = float4(outputColor.a, outputColor.a, outputColor.a, 1.0f);
	
	//outputColor = float4(outputColor.x, outputColor.x, outputColor.x, 1.0f);
	
	//outputColor = (outputColor.x < 1.0f) ? float4(1.0f, 0.0f, 0.0f, 1.0f) : float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	return outputColor;
}