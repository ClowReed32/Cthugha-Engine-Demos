/////////////////////////////////////////////////////////////////////////////////
//																			   //
//		SIMPLE FILLBUFFERSHADER	(SIMPLE LIGHTING)			   				   //
//																			   //
/////////////////////////////////////////////////////////////////////////////////

// Input data
struct VsIn 
{
	float3 vertexPosition_modelspace : Position;
	float3 vertexNormal_modelspace	 : Normal;
	float2 vertexUV_modelspace		 : TexCoord;
	float3 vertexTangent_modelspace	 : Tangent;
	float3 vertexBinormal_modelspace : Binormal;
};

struct HsIn 
{
	float3 vertexNormal_worldspace   : Normal;
	float4 vertexPosition_worldspace : TexCoord1;
	float2 vertexUV					 : TexCoord2;
	float3 vertexTangent_worldspace  : Tangent;
	float3 vertexBinormal_worldspace : Binormal;
};

struct DsInConstant
{
    float    Edges[3]         : SV_TessFactor;
    float    Inside           : SV_InsideTessFactor;
	float	 mipMapLod		  : TexCoord;
};

struct DsIn 
{
	float3 vertexNormal_worldspace   : Normal;
	float4 vertexPosition_worldspace : TexCoord1;
	float2 vertexUV					 : TexCoord2;
	float3 vertexTangent_worldspace  : Tangent;
	float3 vertexBinormal_worldspace : Binormal;
};

struct PsIn 
{
	float3 vertexNormal_worldspace   : Normal;
	float4 vertexDepth_projectspace  : SV_Position;
	float4 vertexPosition_viewSpace  : TexCoord0;
	float4 vertexPosition_worldspace : TexCoord1;
	float2 vertexUV					 : TexCoord2;
	float3 vertexTangent_worldspace  : Tangent;
	float3 vertexBinormal_worldspace : Binormal;
};

[Vertex shader]

float4x4 World;
float4x4 View;
float4x4 Projection;

HsIn main(VsIn In)
{
	HsIn output;
	
	output.vertexPosition_worldspace = mul(float4(In.vertexPosition_modelspace, 1.0f), World);
	output.vertexNormal_worldspace = normalize(mul(float4(In.vertexNormal_modelspace, 0.0f), World).xyz);
	output.vertexUV.x = In.vertexUV_modelspace.x;
	output.vertexUV.y = 1.0f - In.vertexUV_modelspace.y;
	output.vertexTangent_worldspace = normalize(mul(float4(In.vertexTangent_modelspace, 0.0f), World).xyz);
	output.vertexBinormal_worldspace = normalize(mul(float4(In.vertexBinormal_modelspace, 0.0f), World).xyz);
	
	return output;
 }

[Tessellation Control shader]                                                                

float2 screenSize;
float4 cameraPosition;

float tesselationSubdivision;

float4x4 View;
float4x4 Projection;

float2 GetScreenCoord(float3 pos, float4x4 viewProjMat, float screenWidth, float screenHeight)
{
	float4 point_projectSpace = mul(float4(pos, 1.0f), viewProjMat);
	float2 point_screenSpace = point_projectSpace.xy / point_projectSpace.w;
	
	point_screenSpace = (point_screenSpace*0.5 + 0.5) * float2(screenWidth, screenHeight);
	
	return point_screenSpace;
}

bool ViewFrustumCull(float2 point1_screenSpace, float2 point2_screenSpace, float2 point3_screenSpace, float2 screenSize)
{
	//few false positives but it's fast and simple
	
	//triangle AABB
	float2 maxCoord = float2(max(point1_screenSpace.x, max(point2_screenSpace.x, point3_screenSpace.x)), max(point1_screenSpace.y, max(point2_screenSpace.y, point3_screenSpace.y)));
	float2 minCoord = float2(min(point1_screenSpace.x, min(point2_screenSpace.x, point3_screenSpace.x)), min(point1_screenSpace.y, min(point2_screenSpace.y, point3_screenSpace.y)));
	
	if(minCoord.x > (screenSize.x + 20.0f) || maxCoord.x < (0.0 - 20.0f) || minCoord.y > (screenSize.y + 20.0f) || maxCoord.y < (0.0 - 20.0f))
		return false;

	return true;
}
 
DsInConstant ConstantsHS( InputPatch<HsIn, 3> p, uint PatchID : SV_PrimitiveID )                                                                                
{
	DsInConstant output = (DsInConstant)0;
	
	float pixelPerEdge = 5;
	float inversePixelPerEdge = 0.2f;
	
	float4x4 projViewMat = mul(View, Projection);
	
	float2 screenPoint1 = GetScreenCoord(p[0].vertexPosition_worldspace.xyz, projViewMat, screenSize.x, screenSize.y);
	float2 screenPoint2 = GetScreenCoord(p[1].vertexPosition_worldspace.xyz, projViewMat, screenSize.x, screenSize.y);
	float2 screenPoint3 = GetScreenCoord(p[2].vertexPosition_worldspace.xyz, projViewMat, screenSize.x, screenSize.y);
	
	//Frustum Culling
	if(ViewFrustumCull(screenPoint1, screenPoint2, screenPoint3, screenSize))
	{
		float cameraDistance = 0.5f * (distance(p[0].vertexPosition_worldspace.xyz, cameraPosition) + distance(p[1].vertexPosition_worldspace.xyz, cameraPosition));
		
		if(cameraDistance > 1.0f)
		{		
			float distance1 = distance(screenPoint3, screenPoint2);
			float distance2 = distance(screenPoint3, screenPoint1);  
			float distance3 = distance(screenPoint2, screenPoint1);
		
			// Calculate the tessellation levels                                            
			output.Edges[0] = clamp(inversePixelPerEdge*distance1, 1.0, tesselationSubdivision);            
			output.Edges[1] = clamp(inversePixelPerEdge*distance2, 1.0, tesselationSubdivision);            
			output.Edges[2] = clamp(inversePixelPerEdge*distance3, 1.0, tesselationSubdivision);
			
			output.Inside = 0.33*(output.Edges[0] + output.Edges[1] + output.Edges[2]); 
			
			output.mipMapLod = log2((distance1 / output.Edges[0] + distance2 / output.Edges[1] + distance3 / output.Edges[2])*0.33f) + 1;
		}
		else
		{
			output.Edges[0] = tesselationSubdivision;            
			output.Edges[1] = tesselationSubdivision;            
			output.Edges[2] = tesselationSubdivision;
			
			output.Inside = tesselationSubdivision;
			
			output.mipMapLod = 11;
		}
	}
	else
	{
		output.Edges[0] = 0.0;            
		output.Edges[1] = 0.0;            
		output.Edges[2] = 0.0;
		
		output.Inside = 0.0;
		
		output.mipMapLod = 0.0;
	}
	
	return output;
}  

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("ConstantsHS")]
[maxtessfactor(64.0)]
DsIn main( InputPatch<HsIn, 3> inputPatch, uint uCPID : SV_OutputControlPointID )
{
    DsIn output = (DsIn)0;
    
    // Copy inputs to outputs
	output.vertexNormal_worldspace = inputPatch[uCPID].vertexNormal_worldspace;
	output.vertexPosition_worldspace = inputPatch[uCPID].vertexPosition_worldspace;
	output.vertexUV = inputPatch[uCPID].vertexUV;
	output.vertexTangent_worldspace = inputPatch[uCPID].vertexTangent_worldspace;
	output.vertexBinormal_worldspace = inputPatch[uCPID].vertexBinormal_worldspace;

    return output;
}

[Tessellation Evaluation shader]

float4x4 View;
float4x4 Projection;

float4 cameraPosition;

float displacementDepth;

Texture2D NormalTexture;
SamplerState TargetSampler;                                                  
//float gDispFactor;                                                         
 
float2 interpolate2D(float2 v0, float2 v1, float2 v2, float3 BarycentricCoordinates)                                                   
{                                                                                               
    return BarycentricCoordinates.x * v0 + BarycentricCoordinates.y * v1 + BarycentricCoordinates.z * v2;   
}                                                                                               
 
float3 interpolate3D(float3 v0, float3 v1, float3 v2, float3 BarycentricCoordinates)                                                   
{                                                                                               
    return BarycentricCoordinates.x * v0 + BarycentricCoordinates.y * v1 + BarycentricCoordinates.z * v2;   
}                                                                                           

[domain("tri")]
PsIn main( DsInConstant input, float3 BarycentricCoordinates : SV_DomainLocation, const OutputPatch<DsIn, 3> TrianglePatch )                                                                                   
{
	PsIn output;
	
    // Interpolate the attributes of the output vertex using the barycentric coordinates        
    output.vertexUV = interpolate2D(TrianglePatch[0].vertexUV, TrianglePatch[1].vertexUV, TrianglePatch[2].vertexUV, BarycentricCoordinates);    
    output.vertexNormal_worldspace = interpolate3D(TrianglePatch[0].vertexNormal_worldspace, TrianglePatch[1].vertexNormal_worldspace, TrianglePatch[2].vertexNormal_worldspace, BarycentricCoordinates);            
	output.vertexTangent_worldspace = interpolate3D(TrianglePatch[0].vertexTangent_worldspace, TrianglePatch[1].vertexTangent_worldspace, TrianglePatch[2].vertexTangent_worldspace, BarycentricCoordinates);            
	output.vertexBinormal_worldspace = interpolate3D(TrianglePatch[0].vertexBinormal_worldspace, TrianglePatch[1].vertexBinormal_worldspace, TrianglePatch[2].vertexBinormal_worldspace, BarycentricCoordinates);            
	output.vertexPosition_worldspace = float4(interpolate3D(TrianglePatch[0].vertexPosition_worldspace.xyz, TrianglePatch[1].vertexPosition_worldspace.xyz, TrianglePatch[2].vertexPosition_worldspace.xyz, BarycentricCoordinates), 1.0f);
	
	// Displace the vertex along the normal                                                     
    float Displacement = NormalTexture.SampleLevel(TargetSampler, output.vertexUV, clamp(input.mipMapLod, 0, 11)).w;                        
    output.vertexPosition_worldspace.xyz += output.vertexNormal_worldspace * Displacement * displacementDepth;
	
	output.vertexPosition_viewSpace = mul(output.vertexPosition_worldspace, View);
	output.vertexDepth_projectspace = mul(output.vertexPosition_viewSpace, Projection);

	return output;
}
 
[Fragment shader]

struct PsOut 
{
	float depth	   : SV_Target0;
	float4 normal  : SV_Target1;
	float4 color   : SV_Target2;
};

//Textures////////////////////////////////
Texture2D ColorTexture;
Texture2D NormalTexture;
Texture2D SpecularTexture;
//////////////////////////////////////////

//Sampler States//////////////////////////
SamplerState BaseFilter;
SamplerState VoxelFilter;
//////////////////////////////////////////

//Material////////////////////////////////
float4 DiffuseColor;

float Exponent;
float4 kE;
float kS;

int bColorTexture;
int bSpecularTexture;
int bNormalTexture;
////////////////////////////////////////////

//Camera constant
float4 cameraPosition;

PsOut main(PsIn In)
{
	PsOut output;
	
	output.color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	output.normal = float4(0.0f, 0.0f, 0.0f, 0.0f);
	
	if(bColorTexture == 1)
	{
		output.color = ColorTexture.Sample(BaseFilter, In.vertexUV);
	}
	else
	{
		output.color = DiffuseColor;
	}
	
	if(bNormalTexture == 1)
	{
		float3 bumpNormal = normalize(2.0f*(NormalTexture.Sample(BaseFilter , In.vertexUV).rgb - 0.5f));
		
		float3 tangent_worldSpace = In.vertexTangent_worldspace;
		float3 normal_worldSpace = In.vertexNormal_worldspace;
		float3 binormal_worldSpace = In.vertexBinormal_worldspace;
		float3x3 matInverse = float3x3(tangent_worldSpace, binormal_worldSpace, normal_worldSpace);
		bumpNormal = mul(bumpNormal, matInverse);
		
		output.normal = float4(bumpNormal, 0.0f);
	}
	else
	{
		output.normal.xyz = normalize(In.vertexNormal_worldspace);
	}
	
	if(bSpecularTexture == 1)
	{
		float specularConstant = SpecularTexture.Sample(BaseFilter, In.vertexUV).x;
		output.color.w = specularConstant;
	}
	else
	{
		output.color.w = kS;
	}
	
	output.normal.w = 2.0f*Exponent - 1.0f;	
	output.depth = length(In.vertexPosition_viewSpace.xyz);
	
	return output;
}